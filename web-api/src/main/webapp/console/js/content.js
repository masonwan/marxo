// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define('content', ['base', 'models', 'manager', 'lib/jquery-ui', 'lib/bootstrap-fileupload', 'lib/bootstrap-wysiwyg'], function(_arg, _arg1, _arg2) {
    var AutoIncOptionList, BoxFormView, BoxView, ChangeTypeMixin, Content, ContentActionCell, ContentEditorMixin, ContentFrameView, ContentManagerView, Contents, EmailComposer, FormDialogView, FormViewMixin, FrameView, InnerFrameView, ManagerView, ModalDialogView, NavFilterView, PageDescView, PageDesigner, ProjectFilterView, RichEditorMixin, SectionEditor, SubmitOptionsEditor, TextEditor, View, find, findAll, tpl, tplAll, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    find = _arg.find, findAll = _arg.findAll, tpl = _arg.tpl, tplAll = _arg.tplAll, View = _arg.View, BoxView = _arg.BoxView, FrameView = _arg.FrameView, InnerFrameView = _arg.InnerFrameView, ModalDialogView = _arg.ModalDialogView, FormViewMixin = _arg.FormViewMixin, FormDialogView = _arg.FormDialogView;
    Contents = _arg1.Contents, Content = _arg1.Content;
    ManagerView = _arg2.ManagerView, NavFilterView = _arg2.NavFilterView, ProjectFilterView = _arg2.ProjectFilterView;
    ContentFrameView = (function(_super) {
      __extends(ContentFrameView, _super);

      function ContentFrameView() {
        _ref = ContentFrameView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ContentFrameView.prototype.initialize = function(options) {
        ContentFrameView.__super__.initialize.call(this, options);
        this.manager = new ContentManagerView({
          el: this.el,
          parent: this
        });
        this.editor = new TextEditor({
          el: '#text_editor',
          parent: this
        });
        this.composer = new EmailComposer({
          el: '#email_composer',
          parent: this
        });
        this.designer = new PageDesigner({
          el: '#page_designer',
          parent: this
        });
        return this;
      };

      ContentFrameView.prototype.open = function(name, arg) {
        if (name) {
          this.load(name, arg, function(action, data) {
            if (action === 'save') {
              return data.save({}, {
                success: function(content) {
                  return console.log('saved', content);
                },
                error: function() {
                  return console.error('save failed');
                }
              });
            } else {
              return console.log(action, data);
            }
          });
        } else {
          if (!this.manager.rendered) {
            this.manager.render();
          }
          this.designer.cancel();
          this.editor.cancel();
          this.composer.cancel();
        }
        return this;
      };

      ContentFrameView.prototype.load = function(id, action, callback) {
        var _this = this;
        if (id instanceof Content) {
          return this.popup(id, callback);
        } else if (typeof id === 'string') {
          return new Content({
            id: id
          }).fetch({
            success: function(data) {
              return _this.popup(data, action, callback);
            }
          });
        } else {
          throw new Error('content editor can only load a content model or an id string');
        }
      };

      ContentFrameView.prototype.popup = function(data, action, callback) {
        var editor, media;
        media = data.get('media');
        editor = (function() {
          switch (media) {
            case 'FACEBOOK':
            case 'TWITTER':
              return this.editor;
            case 'PAGE':
              return this.designer;
            case 'EMAIL':
              return this.composer;
            default:
              throw new Error('unsupported media type ' + media);
          }
        }).call(this);
        if (!editor.rendered) {
          editor.render();
        }
        editor.popup(data, action, callback);
        return this;
      };

      return ContentFrameView;

    })(FrameView);
    ContentEditorMixin = (function() {
      function ContentEditorMixin() {}

      ContentEditorMixin.prototype.goBackOnHidden = 'content';

      ContentEditorMixin.prototype.load = function(id, action, callback) {
        var _this = this;
        if (id instanceof Content) {
          return this.popup(id, callback);
        } else if (typeof id === 'string') {
          return new Content({
            id: id
          }).fetch({
            success: function(data) {
              return _this.popup(data, action, callback);
            }
          });
        } else {
          throw new Error('content editor can only load a content model or an id string');
        }
      };

      return ContentEditorMixin;

    })();
    RichEditorMixin = (function() {
      function RichEditorMixin() {}

      RichEditorMixin.prototype._fonts = ['Serif', 'Sans', 'Arial', 'Arial Black', 'Courier', 'Courier New', 'Comic Sans MS', 'Helvetica', 'Impact', 'Lucida Grande', 'Lucida Sans', 'Tahoma', 'Times', 'Times New Roman', 'Verdana'];

      RichEditorMixin.prototype.events = {
        'click .btn.hyperlink': function(e) {
          return setTimeout(function() {
            return $(e.currentTarget).siblings('.dropdown-menu').find('input').focus();
          }, 200);
        },
        'click .btn-switch': '_switch'
      };

      RichEditorMixin.prototype.readOnlyHtml = function(val) {
        this.readOnly = val;
        this.$editor.attr('contenteditable', !val);
        this.$code.attr('readonly', val);
        this.$edits.prop('disabled', val);
        return this;
      };

      RichEditorMixin.prototype.fillHtml = function(html) {
        this.$editor.html(html || '');
        return this;
      };

      RichEditorMixin.prototype.readHtml = function() {
        if (this.$code.is(':visible')) {
          return this.$code.val();
        } else {
          return this.$editor.cleanHtml();
        }
      };

      RichEditorMixin.prototype.resetHtml = function() {
        this.$code.val('');
        this._switch(false);
        this.$el.find('.btn-switch').removeClass('active');
        return this;
      };

      RichEditorMixin.prototype._renderFonts = function() {
        var a, flagment, fontName, fontTarget, li, _i, _len, _ref1;
        fontTarget = find('.fonts-select', this.el);
        fontTarget.innerHTML = '';
        flagment = document.createDocumentFragment();
        _ref1 = this._fonts;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          fontName = _ref1[_i];
          li = document.createElement('li');
          a = document.createElement('a');
          a.dataset.edit = "fontName " + fontName;
          a.style.fontFamily = fontName;
          a.textContent = fontName;
          li.appendChild(a);
          flagment.appendChild(li);
        }
        fontTarget.appendChild(flagment);
      };

      RichEditorMixin.prototype.renderRichEditor = function() {
        this._renderFonts();
        this.$el.find('.dropdown-menu input').click(function() {
          return false;
        }).change(function() {
          return $(this).parent('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle');
        }).keydown(function(e) {
          if (e.which === 27) {
            this.value = '';
            $(this).change().parents('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle');
          }
          return true;
        });
        this.$el.find('[type=file]').each(function() {
          var overlay, target;
          overlay = $(this);
          target = $(overlay.data('target'));
          return overlay.css({
            opacity: 0,
            position: 'absolute',
            cursor: 'pointer'
          }).offset(target.offset()).width(target.outerWidth()).height(target.outerHeight());
        });
        this.$editor = this.$el.find('.rich-editor').wysiwyg();
        this.$code = this.$editor.siblings('.rich-editor-html');
        this.$edits = this.$el.find('.btn-toolbar').find('[data-edit],.btn.dropdown-toggle,.btn-edit');
        this.$edits.tooltip({
          container: this.el
        });
        return this;
      };

      RichEditorMixin.prototype._switch = function(toCode) {
        var $code, $editor;
        $editor = this.$editor;
        $code = this.$code;
        if (typeof toCode !== 'boolean') {
          toCode = !$code.is(':visible');
        }
        if (toCode) {
          $editor.hide();
          $code.show().val($editor.cleanHtml());
        } else {
          $code.hide();
          $editor.show().html($code.val());
        }
        if (!this.readOnly) {
          this.$edits.prop('disabled', toCode);
        }
      };

      return RichEditorMixin;

    })();
    TextEditor = (function(_super) {
      __extends(TextEditor, _super);

      function TextEditor() {
        _ref1 = TextEditor.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TextEditor.acts_as(ContentEditorMixin);

      TextEditor.prototype.popup = function(data, ignored, callback) {
        var posted;
        TextEditor.__super__.popup.call(this, data, callback);
        this.fill(data);
        posted = 'POSTED' === data.get('status');
        this.form.desc.readOnly = posted;
        this.btnSave.disabled = posted;
        return this;
      };

      TextEditor.prototype.fill = function(data) {
        var media, textarea;
        media = data.get('media');
        this.$el.find('small.media').text("(" + (media.toLowerCase()) + ")");
        this.form.title.value = data.get('title');
        this.form.desc.value = data.get('desc');
        textarea = this.form.desc;
        switch (media) {
          case 'FACEBOOK':
            textarea.maxLength = 65535;
            textarea.rows = 10;
            break;
          case 'TWITTER':
            textarea.maxLength = 140;
            textarea.rows = 5;
            break;
          default:
            console.warn('text editor is only for socal media, not for page or email!', media);
        }
        return this;
      };

      TextEditor.prototype.read = function() {
        return this.form.desc.value;
      };

      TextEditor.prototype.save = function() {
        this.data.set('desc', this.read());
        this.callback('save');
        this.hide(true);
        return this;
      };

      return TextEditor;

    })(FormDialogView);
    EmailComposer = (function(_super) {
      __extends(EmailComposer, _super);

      function EmailComposer() {
        _ref2 = EmailComposer.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      EmailComposer.acts_as(ContentEditorMixin, RichEditorMixin);

      EmailComposer.prototype.popup = function(data, ignored, callback) {
        var posted;
        EmailComposer.__super__.popup.call(this, data, callback);
        this.fill(data);
        posted = 'POSTED' === data.get('status');
        this.readOnlyHtml(posted);
        this.btnSave.disabled = posted;
        return this;
      };

      EmailComposer.prototype.fill = function(data) {
        EmailComposer.__super__.fill.call(this, data.attributes);
        this.fillHtml(data.get('desc'));
        return this;
      };

      EmailComposer.prototype.read = function() {
        var data;
        data = EmailComposer.__super__.read.apply(this, arguments);
        data.desc = this.readHtml();
        return data;
      };

      EmailComposer.prototype.save = function() {
        this.data.set(this.read());
        this.callback('save');
        this.hide(true);
        return this;
      };

      EmailComposer.prototype.reset = function() {
        EmailComposer.__super__.reset.apply(this, arguments);
        this.resetHtml();
        return this;
      };

      EmailComposer.prototype.render = function() {
        EmailComposer.__super__.render.apply(this, arguments);
        this.renderRichEditor();
        return this;
      };

      return EmailComposer;

    })(FormDialogView);
    PageDesigner = (function(_super) {
      __extends(PageDesigner, _super);

      function PageDesigner() {
        _ref3 = PageDesigner.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      PageDesigner.acts_as(ContentEditorMixin);

      PageDesigner.prototype._preview_html_tpl = tpl('#preview_html_tpl').replace(/_tpl_?(?=[^<]*>)/g, '');

      PageDesigner.prototype._preview_submit_tpl = tpl('#preview_submit_tpl');

      PageDesigner.prototype.events = {
        'click #new_section': function() {
          return this.addSection();
        },
        'click .btn-save': 'save',
        'click .btn-preview': 'togglePreview'
      };

      PageDesigner.prototype.initialize = function(options) {
        var _this = this;
        PageDesigner.__super__.initialize.call(this, options);
        this.iframe = find('iframe', this.el);
        this.btnSave = find('.btn-save', this.el);
        this.btnPreview = find('.btn-preview', this.el);
        this.pageDesc = new PageDescView({
          el: find('#page_desc', this.el)
        });
        this.submitOptions = new SubmitOptionsEditor({
          el: find('#submit_options', this.el)
        });
        this.sections = [];
        this.sectionsEl = find('#sections', this.el);
        $(this.sectionsEl).sortable({
          axis: 'y',
          delay: 150,
          distance: 15,
          cancel: '.box-content'
        });
        this.on('sections_update', function() {
          var count;
          count = (findAll('.section', _this.sectionsEl)).length;
          return _this.submitOptions.$el[count ? 'show' : 'hide']();
        });
        return this;
      };

      PageDesigner.prototype.popup = function(data, action, callback) {
        var page_desc, section, sections, _i, _len;
        PageDesigner.__super__.popup.call(this, data, callback);
        page_desc = {
          title: data.get('title'),
          desc: data.get('desc')
        };
        this.pageDesc.fill(page_desc);
        if (data.has('options')) {
          this.submitOptions.fill(data.get('options'));
        }
        sections = data.get('sections') || [];
        if (data.has('sections')) {
          for (_i = 0, _len = sections.length; _i < _len; _i++) {
            section = sections[_i];
            this.addSection(section);
          }
        } else {
          this.addSection();
        }
        if (action === 'preview') {
          this.showPreview({
            page_desc: page_desc,
            sections: sections
          });
          this.btnSave.disabled = true;
        }
        return this;
      };

      PageDesigner.prototype.read = function(callback) {
        var data, defered, el, read, _i, _idx, _len, _ref4;
        read = function(formView) {
          var deferred, _t;
          deferred = $.Deferred();
          if (formView instanceof BoxFormView) {
            _t = setTimeout(function() {
              console.warn('read box form timeout', formView.id);
              return deferred.reject(formView);
            }, 100);
            formView.submit(function() {
              clearTimeout(_t);
              return deferred.resolve(formView.read());
            });
          } else {
            console.error('read invalid box form', formView);
            deferred.reject(formView);
          }
          return deferred.promise();
        };
        if (typeof callback !== 'function') {
          throw new Error('content editor read is async, callback is needed');
        }
        defered = [read(this.pageDesc)];
        _ref4 = findAll('.box.section', this.el);
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          el = _ref4[_i];
          _idx = el.dataset.idx;
          data = read(this.sections[_idx]);
          defered.push(data);
        }
        defered.push(read(this.submitOptions));
        $.when.apply(this, defered).fail(function() {
          return callback(null);
        }).done(function() {
          var page_desc, sections, submit_options, _j;
          page_desc = arguments[0], sections = 3 <= arguments.length ? __slice.call(arguments, 1, _j = arguments.length - 1) : (_j = 1, []), submit_options = arguments[_j++];
          return callback({
            page_desc: page_desc,
            sections: sections,
            submit_options: submit_options
          });
        });
        return this;
      };

      PageDesigner.prototype.save = function() {
        var _this = this;
        if (this.iframe.classList.contains('active')) {
          this.togglePreview();
        }
        return this.read(function(data) {
          if (data) {
            console.log('save content', data);
            _this.data.set('title', data.page_desc.title);
            _this.data.set('desc', data.page_desc.desc);
            _this.data.set('sections', data.sections);
            _this.data.set('options', data.submit_options);
            _this.callback('save');
            return _this.hide(true);
          }
        });
      };

      PageDesigner.prototype.reset = function() {
        PageDesigner.__super__.reset.apply(this, arguments);
        this.sectionsEl.innerHTML = '';
        this.pageDesc.reset();
        this.submitOptions.reset();
        this.iframe.classList.remove('active');
        this.btnPreview.classList.remove('active');
        this.btnSave.disabled = false;
        return this;
      };

      PageDesigner.prototype.addSection = function(data) {
        var view,
          _this = this;
        view = new SectionEditor({
          idx: this.sections.length,
          parent: this
        });
        view.render();
        view.fill(data);
        this.sectionsEl.appendChild(view.el);
        this.sections.push(view);
        this.listenTo(view, 'remove', function() {
          _this.sections[view.id] = null;
          return _this.delayedTrigger('sections_update', 100);
        });
        this.delayedTrigger('sections_update', 1);
        return this;
      };

      PageDesigner.prototype.removeSection = function(view) {
        view.remove();
        return this;
      };

      PageDesigner.prototype.showPreview = function(data) {
        var btnCls, cls, html, iframe, url, _ref4;
        if (!data) {
          throw new Error('data is empty for gen preview');
        }
        console.log('show preview', data);
        cls = this.iframe.classList;
        btnCls = this.btnPreview.classList;
        iframe = this.iframe;
        html = this._genPreview(data);
        if (html !== iframe.getAttribute('srcdoc')) {
          iframe.setAttribute('srcdoc', html);
          if (!('srcdoc' in iframe)) {
            url = 'javascript: window.frameElement.getAttribute("srcdoc");';
            iframe.src = url;
            if ((_ref4 = iframe.contentWindow) != null) {
              _ref4.location = url;
            }
          }
        }
        cls.add('active');
        btnCls.add('active');
        return this;
      };

      PageDesigner.prototype.togglePreview = function() {
        var btnCls, cls,
          _this = this;
        cls = this.iframe.classList;
        btnCls = this.btnPreview.classList;
        if (cls.contains('active')) {
          cls.remove('active');
          btnCls.remove('active');
          this.btnSave.disabled = false;
        } else {
          this.btnPreview.disabled = true;
          this.read(function(data) {
            if (data) {
              _this.showPreview(data);
            } else {
              cls.remove('active');
              btnCls.remove('active');
            }
            return _this.btnPreview.disabled = false;
          });
        }
        return this;
      };

      PageDesigner.prototype._genPreview = function(_arg3) {
        var content, data, i, page_desc, sections, view, _i, _len;
        page_desc = _arg3.page_desc, sections = _arg3.sections;
        content = ["<h1>" + page_desc.title + "</h1>\n<p>" + (page_desc.desc || '') + "</p>"];
        for (i = _i = 0, _len = sections.length; _i < _len; i = ++_i) {
          data = sections[i];
          view = new SectionEditor({
            idx: i
          });
          content.push(view.genPreview(data));
        }
        content = content.join('\n');
        if (sections != null ? sections.length : void 0) {
          content += this._preview_submit_tpl;
        }
        return this._preview_html_tpl.replace('{{content}}', content);
      };

      PageDesigner.prototype.render = function() {
        var _body;
        this.pageDesc.render();
        this.submitOptions.render();
        _body = find('.modal-body', this.el);
        $(_body).find('.btn[title]').tooltip({
          container: _body
        });
        PageDesigner.__super__.render.apply(this, arguments);
        return this;
      };

      return PageDesigner;

    })(ModalDialogView);
    BoxFormView = (function(_super) {
      __extends(BoxFormView, _super);

      function BoxFormView() {
        _ref4 = BoxFormView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      BoxFormView.acts_as(FormViewMixin);

      BoxFormView.prototype.render = function() {
        return this.initForm();
      };

      BoxFormView.prototype.reset = function() {
        this.form.reset();
        return this;
      };

      return BoxFormView;

    })(BoxView);
    PageDescView = (function(_super) {
      __extends(PageDescView, _super);

      function PageDescView() {
        _ref5 = PageDescView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      PageDescView.acts_as(RichEditorMixin);

      PageDescView.prototype.fill = function(data) {
        PageDescView.__super__.fill.call(this, data);
        this.fillHtml(data.desc);
        return this;
      };

      PageDescView.prototype.read = function() {
        var data;
        data = PageDescView.__super__.read.apply(this, arguments);
        data.desc = this.readHtml();
        return data;
      };

      PageDescView.prototype.reset = function() {
        PageDescView.__super__.reset.apply(this, arguments);
        this.resetHtml();
        return this;
      };

      PageDescView.prototype.render = function() {
        PageDescView.__super__.render.apply(this, arguments);
        this.renderRichEditor();
        return this;
      };

      return PageDescView;

    })(BoxFormView);
    ChangeTypeMixin = (function() {
      function ChangeTypeMixin() {}

      ChangeTypeMixin.prototype.changeType = function(type) {
        var cls, field, required, show, _i, _len, _ref6;
        if (type !== this._type) {
          this.trigger('type_change', type, this._type);
          if (this.optionFields == null) {
            this.optionFields = findAll('.option-field', this.el);
          }
          _ref6 = this.optionFields;
          for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
            field = _ref6[_i];
            cls = field.classList;
            show = type && cls.contains(type + '-option');
            required = find('[data-option-required]', field);
            if (required != null) {
              required.required = show;
            }
            if (show) {
              cls.remove('hide');
            } else {
              cls.add('hide');
            }
          }
          this._type = type;
        }
        return this;
      };

      return ChangeTypeMixin;

    })();
    SubmitOptionsEditor = (function(_super) {
      __extends(SubmitOptionsEditor, _super);

      function SubmitOptionsEditor() {
        _ref6 = SubmitOptionsEditor.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      SubmitOptionsEditor.acts_as(ChangeTypeMixin);

      SubmitOptionsEditor.prototype.events = {
        'change input[type=radio]': function() {
          if (this.checked) {
            return this.changeType(this.value);
          }
        }
      };

      SubmitOptionsEditor.prototype.reset = function() {
        SubmitOptionsEditor.__super__.reset.apply(this, arguments);
        this.$el.find('input[type=radio]').change();
        return this;
      };

      return SubmitOptionsEditor;

    })(BoxFormView);
    SectionEditor = (function(_super) {
      __extends(SectionEditor, _super);

      function SectionEditor() {
        _ref7 = SectionEditor.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      SectionEditor.acts_as(ChangeTypeMixin);

      SectionEditor.prototype.tagName = 'section';

      SectionEditor.prototype.className = 'box section';

      SectionEditor.prototype.tpl = tpl('#section_tpl');

      SectionEditor.prototype.initialize = function(options) {
        SectionEditor.__super__.initialize.call(this, options);
        this.idx = options.idx;
        if (this.id == null) {
          this.id = options.id || this.idx;
        }
        if (typeof this.id === 'number') {
          this.id = 'section_' + this.id;
        }
        if (!this.id) {
          throw new Error('id must be given for a section');
        }
        return this;
      };

      SectionEditor.prototype._bind = function() {
        var auto_gen, auto_gen_key, manual_option_label, manual_options, title, titleEl, typeEl,
          _this = this;
        titleEl = this._find('title');
        title = find('.box-title', this.el);
        titleEl.onchange = function() {
          title.textContent = !this.value ? 'New Section' : 'Section: ' + this.value;
          return true;
        };
        typeEl = this._find('type');
        this.$typeEl = $(typeEl);
        (typeEl.onchange = function() {
          return _this.changeType(typeEl.value);
        })();
        auto_gen = this._find('gen_from_list');
        auto_gen_key = this._find('gen_list_key');
        manual_options = this._find('manual_options');
        manual_option_label = find('input[type=text]', manual_options);
        auto_gen.onchange = function() {
          var cls;
          auto_gen_key.disabled = !this.checked;
          cls = manual_options.classList;
          if (this.checked) {
            cls.add('hide');
            cls.remove('radio-option');
            auto_gen_key.select();
          } else {
            cls.remove('hide');
            cls.add('radio-option');
            manual_option_label.select();
          }
          return true;
        };
        this.autoIncOptionList = new AutoIncOptionList({
          el: manual_options
        });
        this.listenTo(this.autoIncOptionList, 'change', function(el) {
          return _this.trigger('change', el, _this.data);
        });
        $(this.form).on('change', 'input, textarea, select', function(e) {
          return _this.trigger('change', e.target, _this.data);
        });
        this.previewEl = find('.preview', this.el);
        this.on('change fill reset', function() {
          return _this.delayedTrigger('update_preview', 500, _this.data);
        });
        this.on('update_preview', this.updatePreview.bind(this));
        return this;
      };

      SectionEditor.prototype._find = function(part_id) {
        return find("#" + this.id + "_" + part_id, this.el);
      };

      SectionEditor.prototype.fill = function(data) {
        this.reset();
        SectionEditor.__super__.fill.call(this, data);
        if ((data != null ? data.section_type : void 0) === 'radio' && !data.gen_from_list && data.manual_options) {
          this.autoIncOptionList.fill(data.manual_options);
        }
        return this;
      };

      SectionEditor.prototype.read = function() {
        var data;
        data = SectionEditor.__super__.read.call(this);
        if ((data != null ? data.section_type : void 0) === 'radio' && !data.gen_from_list) {
          data.manual_options = this.autoIncOptionList.read();
        }
        return data;
      };

      SectionEditor.prototype.render = function() {
        this.el.id = this.id;
        this.el.dataset.idx = this.idx;
        this.el.innerHTML = this.tpl.replace(/section_#/g, this.id);
        SectionEditor.__super__.render.apply(this, arguments);
        this._bind();
        this.fill();
        return this;
      };

      SectionEditor.prototype.reset = function() {
        SectionEditor.__super__.reset.apply(this, arguments);
        this.$typeEl.change();
        return this;
      };

      SectionEditor.prototype._preview_tpl = (function() {
        var tpls;
        tpls = tplAll('#preview_tpl');
        if (!tpls.section) {
          throw new Error('cannot find preview tpl with name section');
        }
        return tpls;
      })();

      SectionEditor.prototype.genPreview = function(data) {
        var accept, body, el, list, type;
        tpl = this._preview_tpl;
        type = data.section_type || '';
        switch (type) {
          case '':
            body = '';
            break;
          case 'text':
            body = data.text_multiline ? tpl.textarea : tpl.text;
            break;
          case 'html':
            body = tpl.html;
            break;
          case 'radio':
            el = tpl.radio.replace('{{name}}', "" + this.id + "_preview_radio");
            list = !data.gen_from_list ? data.manual_options : ['List item 1 (Auto Genearted)', 'List item 2 (Auto Genearted)', '... (Auto Genearted)'];
            body = list.map(function(item) {
              return el.replace('{{text}}', item);
            }).join('\n');
            break;
          case 'file':
            accept = data.file_accept;
            if (accept === 'image/*') {
              body = tpl.image;
            } else {
              accept = !accept ? '' : "accept='" + accept + "' ";
              body = tpl.file.replace(/accept(?:=['"]{2})?/, accept);
            }
            break;
          default:
            throw new Error('unknown section type ' + type);
        }
        return tpl.section.replace('{{title}}', data.section_title || '(Need a Title)').replace('{{desc}}', data.section_desc || '').replace('{{body}}', body);
      };

      SectionEditor.prototype.updatePreview = function() {
        var data;
        data = this.read();
        console.log('update preview', this.id, data);
        if (Object.keys(data).length) {
          this.previewEl.innerHTML = this.genPreview(data);
        } else {
          this.previewEl.innerHTML = '';
        }
        return this;
      };

      return SectionEditor;

    })(BoxFormView);
    AutoIncOptionList = (function(_super) {
      __extends(AutoIncOptionList, _super);

      function AutoIncOptionList() {
        _ref8 = AutoIncOptionList.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      AutoIncOptionList.prototype.events = {
        'input input.manual_option_text.new': function(e) {
          var input;
          input = e.target;
          if (input.value.trim()) {
            input.classList.remove('new');
            input.required = true;
            input.dataset.optionRequired = true;
            this._container.appendChild(this._tpl.cloneNode(true));
            this.trigger('change change:add', input, this);
          }
          return true;
        },
        'click .close': function(e) {
          var $el, val;
          e.preventDefault();
          $el = $(e.target).parents('.manual_option');
          val = $el.find('input.manual_option_text').val();
          $el.remove();
          this.trigger('change change:remove', $el[0], val);
          this.validate();
          return false;
        },
        'blur input.manual_option_text': function() {
          return this.validate(false);
        }
      };

      AutoIncOptionList.prototype.initialize = function(options) {
        var dataset,
          _this = this;
        AutoIncOptionList.__super__.initialize.call(this, options);
        tpl = find('.manual_option', this.el);
        if (!tpl) {
          throw new Error('cannot find manual option tpl');
        }
        this._tpl = tpl.cloneNode(true);
        dataset = find('input.manual_option_text[data-option-required]', this._tpl).dataset;
        delete dataset.optionRequired;
        this._container = find('.controls', this.el);
        $(this._container).sortable({
          axis: 'y',
          delay: 150,
          distance: 5,
          cursor: 'move',
          items: '>.manual_option:not(:has(.new))',
          cancel: 'input.manual_option_text',
          change: function(e, ui) {
            return _this.trigger('change change:move', ui.item[0], _this);
          }
        });
        return this;
      };

      AutoIncOptionList.prototype.fill = function(values) {
        var el, frag, input, val, _i, _len;
        if (values != null ? values.length : void 0) {
          frag = document.createDocumentFragment();
          for (_i = 0, _len = values.length; _i < _len; _i++) {
            val = values[_i];
            el = this._tpl.cloneNode(true);
            input = find('input.manual_option_text', el);
            input.value = val;
            input.classList.remove('new');
            frag.appendChild(el);
          }
          $(this._container).prepend(frag);
          this.validate();
        } else {
          console.error('values should be an string array', values);
        }
        return this;
      };

      AutoIncOptionList.prototype.read = function() {
        this.validate();
        return this.values;
      };

      AutoIncOptionList.prototype.validate = function(silence) {
        var valid, values;
        silence = Boolean(silence);
        values = {};
        valid = true;
        this.$el.find('input.manual_option_text:not(.new)').removeClass('error').each(function() {
          var val;
          val = this.value.trim();
          if (!val) {
            valid = false;
            return true;
          } else if (values.hasOwnProperty(val)) {
            this.classList.add('error');
            $(this).one('input', function() {
              return this.classList.remove('error');
            });
            if (!silence) {
              this.select();
            }
            valid = false;
            return silence;
          } else {
            this.value = val;
            values[val] = this;
            return true;
          }
        });
        this.values = valid ? Object.keys(values) : null;
        return valid;
      };

      return AutoIncOptionList;

    })(View);
    ContentActionCell = (function(_super) {
      __extends(ContentActionCell, _super);

      function ContentActionCell() {
        _ref9 = ContentActionCell.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      ContentActionCell.prototype.render = function() {
        var model, report_btn, status, view_btn;
        ContentActionCell.__super__.render.apply(this, arguments);
        model = this.model;
        view_btn = this._find('view', 'a');
        if (model.has('url')) {
          view_btn.href = model.get('url');
        } else {
          this._hide(view_btn);
        }
        status = model.get('status');
        report_btn = this._find('report', 'a');
        if ('POSTED' === status) {
          if (model.has('report_id')) {
            report_btn.href = '#report/' + model.get('report_id');
          } else {
            this._hide(report_btn);
          }
          this._hide('edit');
          this._hide('block');
          this._hide('unblock');
        } else {
          this._hide(report_btn);
          if ('PAGE' !== model.get('media')) {
            this._hide('preview');
          }
          this._hide('BLOCKED' === status ? 'block' : 'unblock');
        }
        return this;
      };

      return ContentActionCell;

    })(Backgrid.ActionsCell);
    ContentManagerView = (function(_super) {
      __extends(ContentManagerView, _super);

      function ContentManagerView() {
        _ref10 = ContentManagerView.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      ContentManagerView.prototype.columns = [
        'id', {
          name: 'title',
          tooltip: 'desc',
          cell: 'tooltip',
          label: 'Title',
          editable: false
        }, {
          name: 'media',
          label: 'Media',
          cell: 'label',
          cls: {
            page: 'label-success icon-page',
            twitter: 'label-twitter icon-twitter',
            facebook: 'label-facebook icon-facebook',
            email: 'label-info icon-mail'
          },
          editable: false
        }, 'project', 'node_action', {
          name: 'status',
          label: 'Status',
          cell: 'label',
          cls: {
            posted: 'label-success',
            waiting: 'label-info',
            blocked: 'label-inverse'
          },
          editable: false
        }, {
          name: 'posted_at',
          label: 'Date Posted',
          cell: 'readonly-datetime',
          editable: false
        }, {
          name: 'content',
          label: '',
          editable: false,
          sortable: false,
          cell: ContentActionCell
        }
      ];

      ContentManagerView.prototype.collection = new Contents;

      ContentManagerView.prototype.initialize = function(options) {
        var collection;
        ContentManagerView.__super__.initialize.call(this, options);
        collection = this.collection.fullCollection;
        this.mediaFilter = new NavFilterView({
          el: find('.media-filter', this.el),
          field: 'media',
          collection: collection
        });
        this.projectFilter = new ProjectFilterView({
          el: find('ul.project-list', this.el),
          collection: collection
        });
        this.refresh = this.refresh.bind(this);
        this.on({
          block: this.block.bind(this),
          unblock: this.unblock.bind(this)
        });
        return this;
      };

      ContentManagerView.prototype.block = function(model) {
        if (confirm('Are you sure to block this content to post to its media?')) {
          model.save({
            status: 'BLOCKED'
          }, {
            wait: true,
            success: this.refresh
          });
        }
        return this;
      };

      ContentManagerView.prototype.unblock = function(model) {
        if (confirm('Are you sure to unblock this content and post to its media?')) {
          model.save({
            status: 'WAITING'
          }, {
            wait: true,
            success: this.refresh
          });
        }
        return this;
      };

      ContentManagerView.prototype.reload = function() {
        ContentManagerView.__super__.reload.apply(this, arguments);
        this.mediaFilter.clear();
        return this.projectFilter.clear();
      };

      ContentManagerView.prototype.render = function() {
        ContentManagerView.__super__.render.apply(this, arguments);
        this.mediaFilter.render();
        this.projectFilter.render();
        return this;
      };

      return ContentManagerView;

    })(ManagerView);
    return ContentFrameView;
  });

}).call(this);
