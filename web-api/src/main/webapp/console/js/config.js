// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var FB_APP_ID,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FB_APP_ID = '213527892138380';

  define('config', ['base', 'manager', 'models'], function(_arg, _arg1, _arg2) {
    var ConfigFrameView, FacebookStatusPopup, FacebookStatusView, FormDialogView, FormViewMixin, FrameView, InnerFrameView, ManagerView, ModalDialogView, ProjectFilterView, Publisher, Publishers, Service, ServiceConnectorView, ServiceStatusView, Tenant, TenantProfileView, User, UserEditor, UserManagemerView, UsernameCell, View, find, findAll, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
    find = _arg.find, findAll = _arg.findAll, View = _arg.View, FrameView = _arg.FrameView, InnerFrameView = _arg.InnerFrameView, ModalDialogView = _arg.ModalDialogView, FormViewMixin = _arg.FormViewMixin, FormDialogView = _arg.FormDialogView;
    ManagerView = _arg1.ManagerView, ProjectFilterView = _arg1.ProjectFilterView;
    Tenant = _arg2.Tenant, User = _arg2.User, Publisher = _arg2.Publisher, Publishers = _arg2.Publishers, Service = _arg2.Service;
    ConfigFrameView = (function(_super) {
      __extends(ConfigFrameView, _super);

      function ConfigFrameView() {
        _ref = ConfigFrameView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ConfigFrameView.prototype.initialize = function(options) {
        ConfigFrameView.__super__.initialize.call(this, options);
        this.profile = new TenantProfileView({
          el: '#tenant_profile',
          parent: this
        });
        this.manager = new UserManagemerView({
          el: '#user_manager',
          parent: this,
          list: this.list
        });
        this.connector = new ServiceConnectorView({
          el: '#service_connector',
          parent: this
        });
        return this;
      };

      ConfigFrameView.prototype.open = function(name, sub) {
        switch (name) {
          case 'users':
            this.switchTo(this.manager);
            this.manager.open(sub);
            break;
          case 'tenant':
            this.switchTo(this.profile);
            break;
          case 'service':
            this.switchTo(this.connector);
            if (sub) {
              this.connector.open(sub);
            }
            break;
          default:
            throw new Error('empty or unknown sub action for config frame ' + name);
        }
        return this;
      };

      return ConfigFrameView;

    })(FrameView);
    ServiceConnectorView = (function(_super) {
      __extends(ServiceConnectorView, _super);

      function ServiceConnectorView() {
        _ref1 = ServiceConnectorView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      ServiceConnectorView.prototype.initialize = function(options) {
        ServiceConnectorView.__super__.initialize.call(this, options);
        this.facebookView = new FacebookStatusView({
          el: find('.btn-facebook', this.el)
        });
        this.twitterView = new ServiceStatusView({
          el: find('.btn-twitter', this.el)
        });
        return this.emailView = new ServiceStatusView({
          el: find('.btn-email', this.el)
        });
      };

      ServiceConnectorView.prototype.open = function(service) {
        switch (service) {
          case 'facebook':
            return this.facebookView.click(false);
          case 'twitter':
          case 'email':
            return console.log('connect service details', service);
          default:
            throw new Error('unknown service');
        }
      };

      ServiceConnectorView.prototype.render = function() {
        this.facebookView.render();
        this.twitterView.render();
        this.emailView.render();
        return this;
      };

      return ServiceConnectorView;

    })(InnerFrameView);
    ServiceStatusView = (function(_super) {
      __extends(ServiceStatusView, _super);

      function ServiceStatusView() {
        _ref2 = ServiceStatusView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      ServiceStatusView.prototype.initialize = function(options) {
        var _base;
        if (this.events == null) {
          this.events = {};
        }
        if ((_base = this.events).click == null) {
          _base.click = 'click';
        }
        this.render = this.render.bind(this);
        this._render = this._render.bind(this);
        this.click = this.click.bind(this);
        this.changed = this.changed.bind(this);
        this._default_text = this.$el.text();
        if (this.popup == null) {
          this.popup = new ModalDialogView({
            el: find("#" + this.service + "_status")
          });
        }
        return ServiceStatusView.__super__.initialize.call(this, options);
      };

      ServiceStatusView.prototype.click = function(auto_connect) {
        var _base;
        if (typeof (_base = this.model).connected === "function" ? _base.connected() : void 0) {
          this.showStatus();
        } else if (auto_connect === false) {
          this.el.focus();
        } else {
          this.connect();
        }
        return this;
      };

      ServiceStatusView.prototype.changed = function(auth) {
        if (auth == null) {
          auth = {
            service: this.service,
            status: 'disconnected'
          };
        }
        this.model.clear().save(auth, {
          success: this.render
        });
        return this;
      };

      ServiceStatusView.prototype.render = function(model) {
        if (model == null) {
          model = this.model;
        }
        if (model != null) {
          model.fetch({
            success: this._render,
            error: this._render
          });
        }
        return ServiceStatusView.__super__.render.apply(this, arguments);
      };

      ServiceStatusView.prototype.showStatus = function() {
        var data, dlg, el, name, value,
          _this = this;
        data = this.model.toJSON();
        data.title = this.$el.text();
        data.expires_at = new Date(data.expires_at);
        dlg = this.popup.el;
        for (name in data) {
          value = data[name];
          el = find("[name='" + name + "']", dlg);
          $(el).text(value);
          if (el != null ? el.href : void 0) {
            el.href = value;
          }
        }
        this.popup.popup(data, function(action, data) {
          switch (action) {
            case 'disconnect':
              return _this.disconnect();
            case 'save':
              return _this.changed(data);
            default:
              return console.log(_this.service, 'status popup', action);
          }
        });
        return this;
      };

      ServiceStatusView.prototype._render = function(model) {
        var cls, field, text, _ref3, _ref4;
        this.model = model;
        text = this.service.charAt(0).toUpperCase() + this.service.slice(1);
        field = this.text_field && ((_ref3 = this.model) != null ? _ref3.get(this.text_field) : void 0);
        this.$el.removeClass('connected disconnected');
        switch ((_ref4 = this.model) != null ? _ref4.get('status') : void 0) {
          case 'disconnected':
            cls = 'disconnected';
            text += ' Disconnected';
            if (field) {
              text += ' from ' + field;
            }
            break;
          case 'connected':
            cls = 'connected';
            text += ' Connected';
            if (field) {
              text += ' as ' + field;
            }
            break;
          default:
            cls = '';
            text = this._default_text;
        }
        if (cls) {
          this.$el.addClass(cls);
        }
        this.$el.text(text);
        return this;
      };

      return ServiceStatusView;

    })(View);
    FacebookStatusPopup = (function(_super) {
      __extends(FacebookStatusPopup, _super);

      function FacebookStatusPopup() {
        _ref3 = FacebookStatusPopup.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      FacebookStatusPopup.prototype.el = '#facebook_status';

      FacebookStatusPopup.prototype.goBackOnHidden = 'config/service';

      FacebookStatusPopup.prototype.events = {
        'click .btn-disconnect': 'disconnect'
      };

      FacebookStatusPopup.prototype.disconnect = function() {
        if (confirm('Are you sure to disconnect your Facebook account?\n\nIt will cause Marxo Facebook Service unable to send and track messages!')) {
          this.callback('disconnect');
          this.hide();
        }
        return this;
      };

      return FacebookStatusPopup;

    })(ModalDialogView);
    FacebookStatusView = (function(_super) {
      __extends(FacebookStatusView, _super);

      function FacebookStatusView() {
        _ref4 = FacebookStatusView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      FacebookStatusView.prototype.service = 'facebook';

      FacebookStatusView.prototype.copy_fields = ['username', 'link', 'locale', 'timezone'];

      FacebookStatusView.prototype.text_field = 'fullname';

      FacebookStatusView.prototype.cfg = {
        appId: FB_APP_ID,
        status: false,
        cookie: false,
        xfbml: true
      };

      FacebookStatusView.prototype.model = new Service({
        service: 'facebook'
      });

      FacebookStatusView.prototype.popup = new FacebookStatusPopup;

      FacebookStatusView.prototype.FB = function(callback) {
        var _this = this;
        if (this._FB != null) {
          callback.call(this, this._FB);
        } else {
          require(['lib/facebook'], function(_FB) {
            _this._FB = _FB;
            _this._FB.init(_this.cfg);
            return callback.call(_this, _this._FB);
          });
        }
        return this;
      };

      FacebookStatusView.prototype.connect = function(callback) {
        var fields;
        if (callback == null) {
          callback = this.changed;
        }
        fields = this.copy_fields;
        this.FB(function(FB) {
          return FB.login(function(response) {
            var auth;
            response = response.authResponse;
            if ((response != null ? response.accessToken : void 0) && response.expiresIn > 0) {
              auth = {
                user_id: response.userID,
                access_token: response.accessToken,
                expires_at: new Date(Date.now() + 1000 * response.expiresIn),
                service: 'facebook',
                status: 'connected'
              };
              return FB.api('/me', function(response) {
                var key, _i, _len;
                for (_i = 0, _len = fields.length; _i < _len; _i++) {
                  key = fields[_i];
                  auth[key] = response[key];
                }
                auth.fullname = response.name;
                console.log('facebook connected', auth);
                return callback(auth);
              });
            } else {
              console.warn('User cancelled login or did not fully authorize.', response);
              callback(null);
              return alert('You cancelled login or did not fully authorize.');
            }
          });
        });
        return this;
      };

      FacebookStatusView.prototype.disconnect = function(callback) {
        if (callback == null) {
          callback = this.changed;
        }
        this.FB(function(FB) {
          return FB.getLoginStatus(function(response) {
            if (response.status === 'connected') {
              return FB.logout(function(response) {
                console.log('logout', response);
                return callback(null);
              });
            } else {
              return callback(null);
            }
          });
        });
        return this;
      };

      return FacebookStatusView;

    })(ServiceStatusView);
    TenantProfileView = (function(_super) {
      __extends(TenantProfileView, _super);

      function TenantProfileView() {
        _ref5 = TenantProfileView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      TenantProfileView.acts_as(FormViewMixin);

      TenantProfileView.prototype.model = new Tenant({
        id: 0
      });

      TenantProfileView.prototype.events = {
        'click .btn-reset': 'reset',
        'click .btn-reload': 'reload'
      };

      TenantProfileView.prototype.initialize = function(options) {
        var $btnReload,
          _this = this;
        TenantProfileView.__super__.initialize.call(this, options);
        this.initForm();
        this.form.onreset = function() {
          return setTimeout(function() {
            return _this.fill(_this.model.attributes);
          }, 1);
        };
        this.on('submit', this.save.bind(this));
        $btnReload = $(find('.btn-reload', this.el));
        this.on('reload', function() {
          $btnReload.button('loading');
          return _this.load(function() {
            return $btnReload.button('reset');
          });
        });
        return this;
      };

      TenantProfileView.prototype.save = function() {
        var $btn, data,
          _this = this;
        $btn = $(this._submit_btn);
        $btn.button('loading');
        data = this.read();
        console.log('save', data);
        this.model.save(data, {
          success: function() {
            $btn.button('reset');
            return _this.reload();
          }
        });
        return this;
      };

      TenantProfileView.prototype.render = function() {
        this.reload();
        return TenantProfileView.__super__.render.apply(this, arguments);
      };

      TenantProfileView.prototype.reload = function() {
        return this.delayedTrigger('reload', 100);
      };

      TenantProfileView.prototype.load = function(callback) {
        var _this = this;
        this.model.fetch({
          success: function(data) {
            console.log('fetch tenant', data.attributes);
            _this.model = data;
            _this.fill(data.attributes);
            return typeof callback === "function" ? callback(data) : void 0;
          }
        });
        return this;
      };

      return TenantProfileView;

    })(InnerFrameView);
    UserEditor = (function(_super) {
      __extends(UserEditor, _super);

      function UserEditor() {
        _ref6 = UserEditor.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      UserEditor.prototype.goBackOnHidden = 'config/users';

      UserEditor.prototype.initialize = function(options) {
        UserEditor.__super__.initialize.call(this, options);
        this.$title = $(find('.modal-title', this.el));
        this.$sex = $(findAll('[name=sex]', this.form));
        this.$editOnly = this.$el.find('.edit-only');
        this.passwords = findAll('[type=password]', this.form);
        return this;
      };

      UserEditor.prototype._setSex = function(sex) {
        var $sex;
        if (sex == null) {
          sex = '';
        }
        $sex = this.$sex.filter("[value='" + sex + "']");
        if ($sex.length && !$sex.hasClass('active')) {
          this.$sex.not($sex).removeClass('active');
          $sex.addClass('active');
        }
        return $sex;
      };

      UserEditor.prototype._getSex = function() {
        return this.$sex.filter('.active').attr('value');
      };

      UserEditor.prototype.fill = function(data) {
        UserEditor.__super__.fill.call(this, data);
        this._setSex(data.sex);
        return this;
      };

      UserEditor.prototype.read = function() {
        var data, password;
        data = UserEditor.__super__.read.apply(this, arguments);
        password = this.passwords[0].value;
        if (!password) {
          data.password = password;
        }
        data.sex = this._getSex();
        return data;
      };

      UserEditor.prototype.reset = function() {
        this.$title.text('Create User');
        this.$editOnly.hide();
        this.form.email.disabled = false;
        $(this.passwords).removeAttr('required');
        this._setSex();
        return UserEditor.__super__.reset.apply(this, arguments);
      };

      UserEditor.prototype.popup = function(data, callback) {
        UserEditor.__super__.popup.call(this, data, callback);
        if (data.email) {
          this.form.email.disabled = true;
          this.$editOnly.show();
          if (data.first_name || data.last_name) {
            this.$title.text("User: " + data.first_name + " " + data.last_name);
          } else {
            this.$title.text("User: " + data.email);
          }
        } else {
          $(this.passwords).attr('required', 'required');
        }
        this.fill(data);
        return this;
      };

      UserEditor.prototype.validate = function() {
        var psw, psw2;
        psw = this.passwords[0].value;
        psw2 = this.passwords[1].value;
        if ((psw || psw2) && psw !== psw2) {
          this.passwords[1].select();
          alert('Passwords are not matched!');
          return false;
        }
        return UserEditor.__super__.validate.apply(this, arguments);
      };

      UserEditor.prototype.save = function() {
        var data, email,
          _this = this;
        data = this.data = this.read();
        email = this.form.email.value.trim();
        if (!data.password) {
          this.callback('save');
          this.hide(true);
        } else {
          require(['crypto'], function(crypto) {
            console.log('crypto', email, data.password);
            data.password = crypto.hashPassword(email, data.password);
            _this.callback('save');
            return _this.hide(true);
          });
        }
        return this;
      };

      return UserEditor;

    })(FormDialogView);
    UsernameCell = (function(_super) {
      __extends(UsernameCell, _super);

      function UsernameCell() {
        _ref7 = UsernameCell.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      UsernameCell.prototype.render = function() {
        this.$el.text("" + (this.model.get('first_name')) + " " + (this.model.get('last_name')));
        return this;
      };

      return UsernameCell;

    })(Backgrid.StringCell);
    UserManagemerView = (function(_super) {
      __extends(UserManagemerView, _super);

      function UserManagemerView() {
        _ref8 = UserManagemerView.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      UserManagemerView.prototype.columns = [
        'checkbox', 'id', {
          name: 'first_name',
          label: 'Username',
          cell: UsernameCell,
          editable: false
        }, {
          name: 'email',
          label: 'Email',
          cell: 'email',
          editable: false
        }, 'status', 'created_at', 'actions:user'
      ];

      UserManagemerView.prototype.collection = new Publishers;

      UserManagemerView.prototype.initialize = function(options) {
        UserManagemerView.__super__.initialize.call(this, options);
        this.editor = new UserEditor({
          el: '#user_editor',
          parent: this
        });
        this.projectFilter = new ProjectFilterView({
          el: find('ul.project-list', this.el),
          collection: this.collection.fullCollection
        });
        this.edit = this.edit.bind(this);
        this.remove = this.remove.bind(this);
        this.on('remove remove_selected', this.remove);
        return this;
      };

      UserManagemerView.prototype.reload = function() {
        this.projectFilter.clear();
        return UserManagemerView.__super__.reload.apply(this, arguments);
      };

      UserManagemerView.prototype.open = function(id) {
        var user;
        if (!id) {
          this.editor.cancel();
        } else if (id === 'new') {
          this.edit(null);
        } else {
          user = this.collection.get(id);
          if (user != null ? user.has('email') : void 0) {
            this.edit(user);
          } else {
            new Publisher({
              id: id
            }).fetch({
              success: this.edit
            });
          }
        }
        return this;
      };

      UserManagemerView.prototype.edit = function(user) {
        var _this = this;
        if (!(user instanceof Publisher)) {
          user = new Publisher;
        }
        this.editor.popup(user.toJSON(), function(action, data) {
          console.log('user', action, data);
          if (action === 'save') {
            data.tenant_id = _this.signin_user.tenant_id;
            if (user.isNew()) {
              _this.collection.create(data);
            } else {
              user.save(data);
            }
            return _this.refresh();
          }
        });
        return this;
      };

      UserManagemerView.prototype.remove = function(users) {
        var user, _i, _len;
        if (!Array.isArray(users)) {
          users = [users];
        }
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          this._remove(user);
        }
        this.refresh();
        return this;
      };

      UserManagemerView.prototype._remove = function(user) {
        var email;
        email = user.get('email');
        if (this.signin_user.email === email) {
          return alert('Cannot remove currently signed in user ' + email);
        } else if (confirm('Are you sure to remoe user ' + email + '?\n\nIt cannot be restored after removal!')) {
          return user.destroy();
        }
      };

      UserManagemerView.prototype.render = function() {
        UserManagemerView.__super__.render.apply(this, arguments);
        this.projectFilter.render();
        this.signin_user = User.current.toJSON();
        return this;
      };

      return UserManagemerView;

    })(ManagerView);
    return ConfigFrameView;
  });

}).call(this);
