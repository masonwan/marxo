// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('notification', ['base', 'manager', 'models'], function(_arg, _arg1, _arg2) {
    var FrameView, ManagerView, NavFilterView, NavListView, NotificationActionCell, NotificationCenterView, NotificationFrameView, NotificationListView, Notifications, ProjectFilterView, Projects, fill, find, tpl, _ref, _ref1, _ref2, _ref3;
    find = _arg.find, tpl = _arg.tpl, fill = _arg.fill, FrameView = _arg.FrameView, NavListView = _arg.NavListView;
    ManagerView = _arg1.ManagerView, NavFilterView = _arg1.NavFilterView, ProjectFilterView = _arg1.ProjectFilterView;
    Projects = _arg2.Projects, Notifications = _arg2.Notifications;
    NotificationFrameView = (function(_super) {
      __extends(NotificationFrameView, _super);

      function NotificationFrameView() {
        _ref = NotificationFrameView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NotificationFrameView.prototype.initialize = function(options) {
        NotificationFrameView.__super__.initialize.call(this, options);
        return this.center = new NotificationCenterView({
          el: this.el,
          parent: this
        });
      };

      NotificationFrameView.prototype.render = function() {
        this.center.render();
        return this;
      };

      return NotificationFrameView;

    })(FrameView);
    NotificationActionCell = (function(_super) {
      __extends(NotificationActionCell, _super);

      function NotificationActionCell() {
        _ref1 = NotificationActionCell.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      NotificationActionCell.prototype.render = function() {
        var btn, model, status;
        NotificationActionCell.__super__.render.apply(this, arguments);
        model = this.model;
        btn = this._find('process', 'a');
        status = model.get('status');
        if (status === 'ACTIVE' && model.has('target_url')) {
          if (btn != null) {
            btn.href = model.get('target_url');
          }
        } else {
          this._hide(btn);
        }
        if (status === 'EXPIRED') {
          this._hide('mute');
        }
        return this;
      };

      return NotificationActionCell;

    })(Backgrid.ActionsCell);
    NotificationCenterView = (function(_super) {
      __extends(NotificationCenterView, _super);

      function NotificationCenterView() {
        _ref2 = NotificationCenterView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      NotificationCenterView.prototype.columns = [
        'checkbox', 'id', {
          name: 'title',
          label: 'Title',
          cell: 'tooltip',
          placement: 'right',
          tooltip: 'desc',
          editable: false
        }, 'project', {
          name: 'type',
          label: 'Type',
          cell: 'label',
          cls: {
            routine: 'label-info',
            requisite: 'label-warning',
            emergent: 'label-important'
          },
          editable: false
        }, {
          name: 'status',
          label: 'Status',
          cell: 'label',
          cls: {
            active: 'label-warning',
            precessed: 'label-success',
            expired: 'label-default'
          },
          editable: false
        }, 'created_at', 'updated_at', {
          name: 'notification',
          label: '',
          editable: false,
          sortable: false,
          cell: NotificationActionCell
        }
      ];

      NotificationCenterView.prototype.collection = new Notifications;

      NotificationCenterView.prototype.initialize = function(options) {
        var collection;
        NotificationCenterView.__super__.initialize.call(this, options);
        collection = this.collection.fullCollection;
        this.statusFilter = new NavFilterView({
          el: find('.status-filter', this.el),
          field: 'status',
          collection: collection
        });
        this.projectFilter = new ProjectFilterView({
          el: find('ul.project-list', this.el),
          collection: collection,
          allowEmpty: true
        });
        return this;
      };

      NotificationCenterView.prototype.reload = function() {
        NotificationCenterView.__super__.reload.apply(this, arguments);
        return this.projectFilter.clear();
      };

      NotificationCenterView.prototype.render = function() {
        NotificationCenterView.__super__.render.apply(this, arguments);
        this.projectFilter.render();
        this.signin_user = JSON.parse(sessionStorage.user);
        return this;
      };

      return NotificationCenterView;

    })(ManagerView);
    NotificationListView = (function(_super) {
      __extends(NotificationListView, _super);

      function NotificationListView() {
        _ref3 = NotificationListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      NotificationListView.prototype.auto = false;

      NotificationListView.prototype.urlRoot = 'notification';

      NotificationListView.prototype.headerTitle = 'Notification';

      NotificationListView.prototype.itemClassName = 'notification-list-item';

      NotificationListView.prototype.collection = Notifications.notifications;

      NotificationListView.prototype.defaultItem = null;

      NotificationListView.prototype.initialize = function(options) {
        var _renderPopover;
        NotificationListView.__super__.initialize.call(this, options);
        _renderPopover = this._renderPopover.bind(this);
        this.$el.popover({
          html: true,
          selector: 'a.pointer',
          container: 'body',
          placement: 'right',
          trigger: 'click',
          title: function() {
            return this.innerHTML;
          },
          content: function() {
            var $el, popover;
            $el = $(this).addClass('active');
            popover = $el.data('popover');
            setTimeout(function() {
              $el.removeClass('active');
              return $(document.body).one('click', function() {
                return popover.hide();
              });
            }, 100);
            return _renderPopover($el.data('model'));
          }
        });
        return this;
      };

      NotificationListView.prototype._renderPopover = function(model) {
        var btn, div, expires_at, p, small, type;
        console.log('render popover', model);
        div = document.createElement('div');
        div.className = 'notification-content';
        p = document.createElement('p');
        p.innerHTML = model.escape('desc');
        div.appendChild(p);
        if ('ACTIVE' === model.get('status')) {
          if (model.has('expires_at')) {
            small = document.createElement('small');
            expires_at = new Date(model.get('expires_at')).toLocaleString();
            small.innerHTML = "Expected expires at " + expires_at;
            div.appendChild(small);
          }
          if (model.has('target_url')) {
            type = model.get('type');
            btn = document.createElement('a');
            btn.href = model.get('target_url');
            btn.className = 'btn btn-small';
            if (type === 'ROUTINE') {
              btn.innerHTML = 'View &raquo;';
            } else {
              btn.className += ' btn-primary icon-right-open';
              btn.innerHTML = 'Process';
            }
            div.appendChild(btn);
          }
        }
        return div;
      };

      NotificationListView.prototype._render = function(models) {
        var col, fragments,
          _this = this;
        if (models == null) {
          models = this.collection;
        }
        if (models.fullCollection) {
          models = models.fullCollection;
        }
        fragments = document.createDocumentFragment();
        col = models.filter(function(model) {
          model._date = new Date(model.get('updated_at') || model.get('created_at')).getTime();
          model._before = Date.now() - model._date;
          switch (model.get('status')) {
            case 'EXPIRED':
              return false;
            case 'PROCESSED':
              return model._before < 86400000;
            default:
              return model._before < 2592000000;
          }
        });
        _.sortBy(col, function(model) {
          var t;
          t = model._before;
          switch (model.get('type')) {
            case 'EMERGENT':
              return t;
            case 'REQUISITE':
              return 10000000000 + t;
            default:
              return 20000000000 + t;
          }
        }).forEach(function(model) {
          return fragments.appendChild(_this._renderItem(model));
        });
        return this.el.appendChild(fragments);
      };

      NotificationListView.prototype._statusCls = {
        'ROUTINE': 'text-info',
        'REQUISITE': 'text-warning',
        'EMERGENT': 'text-error'
      };

      NotificationListView.prototype._renderItem = function(model) {
        var a, cls, i, li, span;
        if (model == null) {
          model = this.defaultItem;
        }
        li = document.createElement('li');
        if (this.itemClassName) {
          li.className = this.itemClassName;
        }
        a = document.createElement('a');
        if (model.id) {
          a.className = "pointer " + cls;
          a.dataset.id = model.id;
          $.data(a, 'model', model);
          cls = this._statusCls[model.get('type')] || '';
          span = document.createElement('span');
          span.textContent = model.get('title');
          span.className = cls;
          i = document.createElement('i');
          i.className = "icon-notify " + cls;
          a.appendChild(i);
          a.appendChild(span);
        } else if (model.href) {
          a.href = model.href;
          a.textContent = model.title;
        }
        li.appendChild(a);
        return li;
      };

      NotificationListView.prototype.render = function() {
        this._clear();
        this._render();
        this.el.appendChild(this._renderItem({
          title: 'View All >',
          href: '#notification'
        }));
        return this;
      };

      return NotificationListView;

    })(NavListView);
    NotificationFrameView.NotificationListView = NotificationListView;
    return NotificationFrameView;
  });

}).call(this);
