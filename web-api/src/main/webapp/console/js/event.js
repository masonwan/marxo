// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('event', ['base', 'manager', 'models', 'lib/jquery-ui', 'lib/fullcalendar'], function(_arg, _arg1, _arg2) {
    var DurationConvertor, Event, EventCalendarView, EventEditorView, EventFrameView, EventManagemerView, Events, FormDialogView, FrameView, FullCalendarView, InnerFrameView, ManagerView, ProjectFilterView, View, find, _ref, _ref1, _ref2, _ref3, _ref4;
    find = _arg.find, View = _arg.View, FrameView = _arg.FrameView, InnerFrameView = _arg.InnerFrameView, FormDialogView = _arg.FormDialogView;
    ManagerView = _arg1.ManagerView, ProjectFilterView = _arg1.ProjectFilterView;
    Events = _arg2.Events, Event = _arg2.Event;
    EventFrameView = (function(_super) {
      __extends(EventFrameView, _super);

      function EventFrameView() {
        _ref = EventFrameView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      EventFrameView.prototype.collection = new Events;

      EventFrameView.prototype.initialize = function(options) {
        EventFrameView.__super__.initialize.call(this, options);
        this.calendar = new EventCalendarView({
          el: '#event_calendar',
          parent: this,
          collection: this.collection.fullCollection
        });
        this.manager = new EventManagemerView({
          el: '#event_manager',
          parent: this,
          collection: this.collection
        });
        this.editor = new EventEditorView({
          el: '#event_editor',
          parent: this
        });
        this.collection.fetch({
          reset: true
        });
        return this;
      };

      EventFrameView.prototype.open = function(name, sub) {
        switch (name) {
          case 'calendar':
            this.switchTo(this.calendar);
            this.calendar.goto(sub);
            break;
          case 'mgr':
            this.switchTo(this.manager);
            break;
          default:
            if (!name) {
              throw new Error('open project with a name or id is needed');
            }
            this.load(name);
        }
        return this;
      };

      EventFrameView.prototype.load = function(id) {
        var event, _load,
          _this = this;
        _load = function(event) {
          return _this.editor.popup(event.toJSON(), function(action, data) {
            if (action === 'save') {
              return event.save(data);
            }
          });
        };
        if (id instanceof Event) {
          return _load(id);
        } else if (event = this.collection.get(id)) {
          return _load(event);
        } else {
          return new Event({
            id: id
          }).fetch({
            success: _load,
            error: function() {
              var err;
              err = "Cannot find event with id " + id + " or net work problem";
              console.error(err);
              return alert(err);
            }
          });
        }
      };

      return EventFrameView;

    })(FrameView);
    DurationConvertor = (function() {
      var AUTO_SHORT_MAX, _delays, _regex, _stringify, _units;
      AUTO_SHORT_MAX = 30;
      _regex = /(?:(\d+)w(?:eek)?s?)?(?:(\d+)d(?:ay)?s?)?(?:(\d+)h(?:our)?s?)?(?:(\d+)m(?:in(?:use?)?s?)?)?(?:(\d+)s(?:ec(?:ond)?)?s?)?(?:(\d+)ms)?/i;
      _delays = [604800000, 86400000, 3600000, 60000, 1000, 1];
      _units = [['week', 's'], ['day', 's'], ['hour', 's'], ['minus', 'es'], ['second', 's'], 'ms'];
      _stringify = function(delay, short) {
        var d, i, ms, next, s, str, _i, _len;
        str = [];
        for (i = _i = 0, _len = _delays.length; _i < _len; i = ++_i) {
          ms = _delays[i];
          s = _units[i];
          if (!s) {
            continue;
          }
          next = delay % ms;
          d = (delay - next) / ms;
          delay = next;
          if (d) {
            if (!Array.isArray(s)) {
              str.push(short ? "" + d + s : "" + d + " " + s);
            } else if (short) {
              str.push("" + d + (s[0].charAt(0)));
            } else {
              s = d === 1 ? s[0] : s[0] + s[1];
              str.push("" + d + " " + s);
            }
          }
        }
        return str.join(' ');
      };
      return {
        parse: function(str) {
          var delay, i, match, n, _i, _len;
          str = str.trim().replace(/\s+|\band\b/ig, '');
          if (!str) {
            return 0;
          } else if (/^\d+$/.test(str)) {
            return parseInt(str);
          } else {
            delay = 0;
            match = str.match(_regex).slice(1);
            for (i = _i = 0, _len = match.length; _i < _len; i = ++_i) {
              n = match[i];
              if (n) {
                delay += n * _delays[i];
              }
            }
            return delay;
          }
        },
        stringify: function(delay, short) {
          var str;
          if (!(delay >= 0)) {
            throw new Error('delay should be number >= 0');
          }
          if (!delay) {
            return '';
          } else {
            str = _stringify(delay, short);
            if ((short == null) && str.length > AUTO_SHORT_MAX) {
              return _stringify(delay, true);
            } else {
              return str;
            }
          }
        }
      };
    })();
    EventEditorView = (function(_super) {
      __extends(EventEditorView, _super);

      function EventEditorView() {
        _ref1 = EventEditorView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      EventEditorView.prototype.goBackOnHidden = 'event/mgr';

      EventEditorView.prototype.initialize = function(options) {
        EventEditorView.__super__.initialize.call(this, options);
        this.$info = $(find('.info', this.form));
        this.$form = $(this.form);
        this._dateToLocale = function(date) {
          if (date) {
            return new Date(date).toLocaleString();
          } else {
            return '';
          }
        };
        if (this.form.starts.type === 'text') {
          this._dateToString = this._dateToLocale;
        } else {
          this._dateToString = function(date) {
            if (date) {
              return new Date(date).toISOString();
            } else {
              return '';
            }
          };
        }
        return this._changed = this._changed.bind(this);
      };

      EventEditorView.prototype._changed = function(e) {
        var cls, duration, ends, form, invalid, msg, starts, _ref2, _toTS;
        form = this.form;
        _toTS = function(date) {
          if (!date) {
            return null;
          } else {
            return new Date(date).getTime();
          }
        };
        starts = _toTS(form.starts.value.trim());
        ends = _toTS(form.ends.value.trim());
        duration = DurationConvertor.parse(form.duration.value.trim());
        if (starts && ends && duration && duration !== ends - starts) {
          switch (e != null ? (_ref2 = e.currentTarget) != null ? _ref2.name : void 0 : void 0) {
            case 'starts':
            case 'duration':
              ends = null;
              break;
            case 'ends':
              duration = null;
              break;
            default:
              console.warn('starts, ends and duration are not matched', starts, ends, duration);
              starts = ends = duration = null;
              invalid = 'Start Date, End Date and Duration are not matched';
          }
        }
        if (starts) {
          form.starts = this._dateToString(starts);
          if (ends) {
            if (!(ends > starts)) {
              invalid = 'Start Date must before End Date';
              console.warn('starts <= ends', starts, ends);
            } else if (!duration) {
              duration = ends - starts;
              form.duration.value = DurationConvertor.stringify(duration);
            }
          } else if (duration) {
            ends = new Date(starts + duration);
            form.ends.value = this._dateToString(ends);
          }
        } else if (ends && duration) {
          starts = new Date(ends - duration);
          form.starts.value = this._dateToString(starts);
        }
        if (invalid) {
          msg = invalid;
          cls = 'error';
        } else {
          console.log('starts, ends, duration:', starts, ends, duration);
          cls = '';
          msg = [];
          if (starts) {
            msg.push("It will be started at " + (this._dateToLocale(starts)) + ".");
            msg.push('<small>A notication will be sent if associated action has not been executed yet.</small>');
          } else {
            msg.push('It will be started automatically when associated action been executed.');
          }
          if (ends) {
            msg.push("It will be ended at " + (this._dateToLocale(ends)) + ".");
          } else {
            cls = 'warning';
            msg.push('It will be ended only after trigger "skip" manually.');
          }
          if (duration) {
            msg.push("Duration between starts and ends is " + form.duration.value + ".");
          }
          msg.push('<small>4 Notifications will be sent before and after event starts and ends.</small>');
          msg = msg.join('<br/>');
        }
        this.$info.html(msg).parents('.control-group').removeClass('success error').addClass(cls);
        return this;
      };

      EventEditorView.prototype.fill = function(data) {
        var starts;
        if (data.starts) {
          data.starts = new Date(data.starts);
          starts = data.starts.getTime();
          if (data.duration && !data.ends) {
            if (data.duration) {
              data.ends = new Date(starts + data.duration);
            }
          } else if (data.ends) {
            data.ends = new Date(data.ends);
            if (data.duration == null) {
              data.duration = data.ends.getTime() - starts;
            }
          }
        }
        data.duration = !data.duration ? '' : DurationConvertor.stringify(data.duration);
        console.log(JSON.stringify(data));
        data.starts = this._dateToString(data.starts);
        data.ends = this._dateToString(data.ends);
        console.log(JSON.stringify(data));
        console.log('fill event data', data);
        EventEditorView.__super__.fill.call(this, data);
        this._changed();
        return this;
      };

      EventEditorView.prototype.read = function() {
        var data, _ref2, _ref3;
        data = EventEditorView.__super__.read.apply(this, arguments);
        data.starts = !((_ref2 = data.starts) != null ? _ref2.length : void 0) ? null : new Date(data.starts);
        data.ends = ((_ref3 = data.ends) != null ? _ref3.length : void 0) ? null : new Date(data.ends);
        data.duration = DurationConvertor.parse(data.duration);
        if (!data.duration) {
          data.duration = null;
        }
        return data;
      };

      EventEditorView.prototype.reset = function() {
        this.$info.empty();
        return EventEditorView.__super__.reset.apply(this, arguments);
      };

      EventEditorView.prototype.popup = function(data, callback) {
        var q, _ref2, _ref3;
        EventEditorView.__super__.popup.call(this, data, callback);
        q = ['change', '[name=starts],[name=ends],[name=duration]', this._changed];
        (_ref2 = this.$form).off.apply(_ref2, q);
        this.fill(data);
        (_ref3 = this.$form).on.apply(_ref3, q);
        return this;
      };

      EventEditorView.prototype.save = function() {
        this.data = this.read();
        this.callback('save');
        this.hide(true);
        return this;
      };

      return EventEditorView;

    })(FormDialogView);
    EventCalendarView = (function(_super) {
      __extends(EventCalendarView, _super);

      function EventCalendarView() {
        _ref2 = EventCalendarView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      EventCalendarView.prototype.collection = EventFrameView.prototype.collection;

      EventCalendarView.prototype.initialize = function(options) {
        var update,
          _this = this;
        EventCalendarView.__super__.initialize.call(this, options);
        update = this.update.bind(this);
        this.calView = new FullCalendarView({
          parent: this,
          el: find('#calendar_view', this.el)
        });
        this.listenTo(this.collection, 'reset add remove change', function() {
          if (_this.$el.is(':visible')) {
            return update();
          }
        });
        this.listenTo(this.calView, 'modify', function(event) {
          var end;
          console.log('modify event', event.start, event.end, event);
          if (event.model && event.start) {
            if (!event.end) {
              end = new Date(event.start);
              end.setHours(24, 0, 0, 0);
              event.end = end;
              console.log('fix end', end);
            }
            return event.model.save({
              starts: event.start,
              ends: event.end,
              duration: event.end.getTime() - event.start.getTime()
            });
          }
        });
        this.on('update', this._update.bind(this));
        return this;
      };

      EventCalendarView.prototype._update = function(event) {
        var cal, col, events, id;
        id = (event != null ? event.id : void 0) || event;
        cal = this.calView;
        col = this.collection;
        if (!cal.rendered) {
          cal.render();
        }
        events = [];
        col.forEach(function(evt) {
          if (id && id === evt.id) {
            event = evt;
          }
          if (evt.has('starts') && evt.has('ends')) {
            return events.push({
              id: evt.id,
              url: "#event/" + evt.id,
              title: evt.get('title'),
              start: new Date(evt.get('starts')),
              end: new Date(evt.get('ends')),
              color: (event === evt ? '#468847' : null),
              allDay: false,
              model: evt
            });
          }
        });
        cal.setEvents({
          editable: true,
          events: events
        });
        if (event instanceof Event && event.has('starts')) {
          this._curEvent = event;
          cal.goto(new Date(event.get('starts')));
        }
        return this;
      };

      EventCalendarView.prototype.goto = function(event) {
        return this.delayedTrigger('update', 100, event);
      };

      EventCalendarView.prototype.update = function() {
        return this.delayedTrigger('update', 100, this._curEvent);
      };

      EventCalendarView.prototype.render = function() {
        this.calView.render();
        this.$el.find('.external-event').each(function() {
          $(this).data('event', {
            title: $.trim($(this).text())
          });
          return $(this).draggable({
            helper: 'clone',
            zIndex: 999,
            revert: true,
            revertDuration: 0
          });
        });
        return this;
      };

      return EventCalendarView;

    })(InnerFrameView);
    FullCalendarView = (function(_super) {
      __extends(FullCalendarView, _super);

      function FullCalendarView() {
        _ref3 = FullCalendarView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      FullCalendarView.prototype.cfg = {
        header: {
          left: 'prev,next today',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        handleWindowResize: false,
        editable: true,
        droppable: true
      };

      FullCalendarView.prototype.initialize = function(options) {
        var $el, fullCalendar,
          _this = this;
        FullCalendarView.__super__.initialize.call(this, options);
        this.collection = options.collection;
        $el = this.$el;
        fullCalendar = this.fullCalendar != null ? this.fullCalendar : this.fullCalendar = $el.fullCalendar.bind($el);
        this.cfg.drop = function(date, allDay, e) {
          var $thumb;
          $thumb = $(e.target);
          _this.addEvent($.extend({}, $thumb.data('event'), {
            date: date,
            allDay: allDay
          }));
          return $thumb.remove();
        };
        this.cfg.eventResize = function(event, dayDelta, minuteDelta, revertFunc) {
          return _this.trigger('modify', event, revertFunc);
        };
        this.cfg.eventDrop = function(event, dayDelta, minuteDelta, allDay, revertFunc) {
          return _this.trigger('modify', event, revertFunc);
        };
        this._resize = function() {
          return _this.delayedTrigger('resize', 150);
        };
        this.on('resize', function() {
          var h;
          h = $el.parents('.inner-frame').innerHeight();
          return fullCalendar('option', 'height', h);
        });
        $(window).resize(this._resize).resize();
        this.$el.on('mousewheel DOMMouseScroll', function(e) {
          if (e.shiftKey || fullCalendar('getView').name === 'month') {
            e.preventDefault();
            e = e.originalEvent;
            fullCalendar(e.wheelDelta > 0 || e.detail < 0 ? 'prev' : 'next');
            return false;
          }
        });
        return this;
      };

      FullCalendarView.prototype._view_map = {
        month: 'month',
        week: 'agendaWeek',
        day: 'agendaDay',
        agendaWeek: 'agendaWeek',
        agendaDay: 'agendaDay'
      };

      FullCalendarView.prototype.goto = function(date, view) {
        if (view && this._view_map.hasOwnProperty(view)) {
          this.fullCalendar('changeView', this._view_map[view]);
        }
        this.fullCalendar('gotoDate', date.getFullYear(), date.getMonth(), date.getDate());
        return this;
      };

      FullCalendarView.prototype.remove = function() {
        $(window).off('resize', this._resize);
        this.fullCalendar('destory');
        return this;
      };

      FullCalendarView.prototype.render = function() {
        this.$el.empty();
        this.fullCalendar(this.cfg);
        return this;
      };

      FullCalendarView.prototype.setEvents = function(events) {
        var _this = this;
        this.fullCalendar('removeEvents');
        console.log('set events', events);
        setTimeout(function() {
          return _this.fullCalendar('addEventSource', events);
        }, 100);
        return this;
      };

      FullCalendarView.prototype.addEvent = function(event) {
        this.fullCalendar('renderEvent', event, true);
        return this;
      };

      return FullCalendarView;

    })(View);
    EventManagemerView = (function(_super) {
      __extends(EventManagemerView, _super);

      function EventManagemerView() {
        _ref4 = EventManagemerView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      EventManagemerView.prototype.columns = ['id', 'title:event', 'project', 'node_action', 'type', 'status', 'actions:event'];

      EventManagemerView.prototype.initialize = function(options) {
        var collection;
        EventManagemerView.__super__.initialize.call(this, options);
        this.collection = options.collection;
        collection = this.collection.fullCollection;
        this.projectFilter = new ProjectFilterView({
          el: find('ul.project-list', this.el),
          collection: collection
        });
        this.on('skip remove_selected', this.skip.bind(this));
        return this;
      };

      EventManagemerView.prototype.skip = function(models) {
        console.log('skip', models);
        return this;
      };

      EventManagemerView.prototype.reload = function() {
        EventManagemerView.__super__.reload.apply(this, arguments);
        return this.projectFilter.clear();
      };

      EventManagemerView.prototype.render = function() {
        EventManagemerView.__super__.render.apply(this, arguments);
        this.projectFilter.render();
        return this;
      };

      return EventManagemerView;

    })(ManagerView);
    return EventFrameView;
  });

}).call(this);
