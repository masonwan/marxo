// Generated by CoffeeScript 1.4.0
(function() {
  var Router, app, fakeSignin, find, findAll, fixStyles, frames,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  find = function(selector, parent) {
    if (parent == null) {
      parent = document;
    }
    return parent.querySelector(selector);
  };

  findAll = function(selector, parent) {
    if (parent == null) {
      parent = document;
    }
    return [].slice.call(parent.querySelectorAll(selector));
  };

  frames = {
    names: ['home', 'project', 'workflow', 'calendar', 'content', 'report', 'config', 'profile'],
    _el: find('#main'),
    _els: findAll('#main .frame')
  };

  frames.names.forEach(function(n) {
    var frame, _ref;
    frame = frames[n] = find('#' + n);
    frame.navEl = (_ref = find("#navbar a[href=\"#" + n + "\"]")) != null ? _ref.parentElement : void 0;
  });

  (fixStyles = function() {
    var padTop;
    padTop = find('#navbar').clientHeight;
    document.body.style.paddingTop = padTop + 'px';
    (window.onresize = function() {
      frames._els.forEach(function(el) {
        if (el.tagName.toLowerCase() === 'iframe') {
          el.style.height = window.innerHeight - padTop + 'px';
          return el.style.top = padTop + 'px';
        }
      });
    })();
  })();

  (fakeSignin = function() {
    var delay, main, signin;
    signin = $('#signin');
    main = $('#main');
    delay = 500;
    return $('#signin :submit').click(function() {
      signin.css('opacity', 0);
      main.show();
      setTimeout(function() {
        signin.hide();
      }, delay);
      return false;
    }).click();
  })();

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      '': 'home',
      'home': 'home'
    };

    Router.prototype.initialize = function() {
      var _this = this;
      frames.names.forEach(function(frame) {
        _this.route(frame + '(/:name)', frame, function(name) {
          return _this.show(frame, name);
        });
      });
    };

    Router.prototype.show = function(frame, name) {
      var _ref, _ref1;
      console.log('frame', frame, name);
      frame = frames[frame];
      if (frame == null) {
        return;
      }
      if (!frame.classList.contains('active')) {
        if ((_ref = find('#main .frame.active')) != null) {
          _ref.classList.remove('active');
        }
        if ((_ref1 = find('#navbar li.active')) != null) {
          _ref1.classList.remove('active');
        }
        frame.classList.add('active');
        frame.navEl.classList.add('active');
      }
      if (typeof this[frame] === "function") {
        this[frame](name);
      }
    };

    Router.prototype.home = function() {
      this.navigate('home', {
        replace: true
      });
      this.show('home');
    };

    Router.prototype.project = function(name) {};

    Router.prototype.workflow = function(name) {};

    Router.prototype.calendar = function(name) {};

    Router.prototype.content = function(name) {};

    Router.prototype.report = function(name) {};

    return Router;

  })(Backbone.Router);

  window.app = app = {};

  app.router = new Router;

  Backbone.history.start();

}).call(this);
