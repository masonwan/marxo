// Generated by eXtraCoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('workflow_models', ['console'], function(_arg) {
    var Action, Entity, Link, Node, SharedActions, SharedLink, SharedLinks, SharedNode, SharedNodes, SharedWorkflow, SharedWorkflows, Tenant, TenantActions, TenantLink, TenantLinks, TenantNode, TenantNodes, TenantWorkflow, TenantWorkflows, Workflow;
    Entity = _arg.Entity;
    Tenant = (function(_super) {

      __extends(Tenant, _super);

      function Tenant() {
        return Tenant.__super__.constructor.apply(this, arguments);
      }

      Tenant.prototype.idAttribute = '_name';

      return Tenant;

    })(Entity);
    SharedWorkflows = (function(_super) {

      __extends(SharedWorkflows, _super);

      function SharedWorkflows() {
        return SharedWorkflows.__super__.constructor.apply(this, arguments);
      }

      SharedWorkflows.prototype.model = SharedWorkflow;

      SharedWorkflows.prototype.url = '/shared/workflows';

      return SharedWorkflows;

    })(Backbone.Collection);
    TenantWorkflows = (function(_super) {

      __extends(TenantWorkflows, _super);

      function TenantWorkflows() {
        return TenantWorkflows.__super__.constructor.apply(this, arguments);
      }

      TenantWorkflows.prototype.model = TenantWorkflow;

      TenantWorkflows.prototype.url = function() {
        return this.tenant.url() + '/workflows';
      };

      return TenantWorkflows;

    })(Backbone.Collection);
    Workflow = (function(_super) {

      __extends(Workflow, _super);

      function Workflow() {
        return Workflow.__super__.constructor.apply(this, arguments);
      }

      return Workflow;

    })(Entity);
    SharedWorkflow = (function(_super) {

      __extends(SharedWorkflow, _super);

      function SharedWorkflow() {
        return SharedWorkflow.__super__.constructor.apply(this, arguments);
      }

      return SharedWorkflow;

    })(Workflow);
    TenantWorkflow = (function(_super) {

      __extends(TenantWorkflow, _super);

      function TenantWorkflow() {
        return TenantWorkflow.__super__.constructor.apply(this, arguments);
      }

      return TenantWorkflow;

    })(Workflow);
    SharedNodes = (function(_super) {

      __extends(SharedNodes, _super);

      function SharedNodes() {
        return SharedNodes.__super__.constructor.apply(this, arguments);
      }

      SharedNodes.prototype.model = SharedNode;

      SharedNodes.prototype.url = '/shared/nodes';

      return SharedNodes;

    })(Backbone.Collection);
    TenantNodes = (function(_super) {

      __extends(TenantNodes, _super);

      function TenantNodes() {
        return TenantNodes.__super__.constructor.apply(this, arguments);
      }

      TenantNodes.prototype.model = TenantNode;

      TenantNodes.prototype.url = function() {
        return this.workflow.url() + '/nodes';
      };

      return TenantNodes;

    })(Backbone.Collection);
    Node = (function(_super) {

      __extends(Node, _super);

      function Node() {
        return Node.__super__.constructor.apply(this, arguments);
      }

      return Node;

    })(Entity);
    SharedNode = (function(_super) {

      __extends(SharedNode, _super);

      function SharedNode() {
        return SharedNode.__super__.constructor.apply(this, arguments);
      }

      return SharedNode;

    })(Node);
    TenantNode = (function(_super) {

      __extends(TenantNode, _super);

      function TenantNode() {
        return TenantNode.__super__.constructor.apply(this, arguments);
      }

      return TenantNode;

    })(Node);
    SharedLinks = (function(_super) {

      __extends(SharedLinks, _super);

      function SharedLinks() {
        return SharedLinks.__super__.constructor.apply(this, arguments);
      }

      SharedLinks.prototype.model = SharedLink;

      SharedLinks.prototype.url = '/shared/links';

      return SharedLinks;

    })(Backbone.Collection);
    TenantLinks = (function(_super) {

      __extends(TenantLinks, _super);

      function TenantLinks() {
        return TenantLinks.__super__.constructor.apply(this, arguments);
      }

      TenantLinks.prototype.model = TenantLink;

      TenantLinks.prototype.url = function() {
        return this.workflow.url() + '/links';
      };

      return TenantLinks;

    })(Backbone.Collection);
    Link = (function(_super) {

      __extends(Link, _super);

      function Link() {
        return Link.__super__.constructor.apply(this, arguments);
      }

      return Link;

    })(Entity);
    SharedLink = (function(_super) {

      __extends(SharedLink, _super);

      function SharedLink() {
        return SharedLink.__super__.constructor.apply(this, arguments);
      }

      return SharedLink;

    })(Link);
    TenantLink = (function(_super) {

      __extends(TenantLink, _super);

      function TenantLink() {
        return TenantLink.__super__.constructor.apply(this, arguments);
      }

      return TenantLink;

    })(Link);
    SharedActions = (function(_super) {

      __extends(SharedActions, _super);

      function SharedActions() {
        return SharedActions.__super__.constructor.apply(this, arguments);
      }

      SharedActions.prototype.model = Action;

      SharedActions.prototype.url = '/shared/actions';

      return SharedActions;

    })(Backbone.Collection);
    TenantActions = (function(_super) {

      __extends(TenantActions, _super);

      function TenantActions() {
        return TenantActions.__super__.constructor.apply(this, arguments);
      }

      TenantActions.prototype.model = Action;

      TenantActions.prototype.url = function() {
        return this.node.url() + '/actions';
      };

      return TenantActions;

    })(Backbone.Collection);
    Action = (function(_super) {

      __extends(Action, _super);

      function Action() {
        return Action.__super__.constructor.apply(this, arguments);
      }

      return Action;

    })(Entity);
    return {
      Tenant: Tenant,
      SharedWorkflows: SharedWorkflows,
      TenantWorkflows: TenantWorkflows,
      Workflow: Workflow,
      SharedWorkflow: SharedWorkflow,
      TenantWorkflow: TenantWorkflow,
      SharedNodes: SharedNodes,
      TenantNodes: TenantNodes,
      Node: Node,
      SharedNode: SharedNode,
      TenantNode: TenantNode,
      SharedLinks: SharedLinks,
      TenantLinks: TenantLinks,
      Link: Link,
      SharedLink: SharedLink,
      TenantLink: TenantLink,
      SharedActions: SharedActions,
      TenantActions: TenantActions,
      Action: Action
    };
  });

}).call(this);

/*
//@ sourceMappingURL=workflow_models.map
*/
