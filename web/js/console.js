// Generated by eXtraCoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('console', ['lib/common'], function() {
    var ConsoleView, Entity, Evalutator, FrameView, Participant, Participants, Publicher, Publichers, Router, SignInView, Tenant, Tenants, User, find, findAll;
    find = function(selector, parent) {
      if (parent == null) {
        parent = document;
      }
      return parent.querySelector(selector);
    };
    findAll = function(selector, parent) {
      if (parent == null) {
        parent = document;
      }
      return [].slice.call(parent.querySelectorAll(selector));
    };
    ConsoleView = (function(_super) {

      __extends(ConsoleView, _super);

      function ConsoleView() {
        return ConsoleView.__super__.constructor.apply(this, arguments);
      }

      ConsoleView.prototype.el = '#main';

      ConsoleView.prototype.initialize = function() {
        var _this = this;
        this.frames = {};
        findAll('.frame', this.el).forEach(function(frame) {
          var navEl;
          navEl = find("#navbar a[href=\"#" + frame.id + "\"]");
          _this.frames[frame.id] = {
            id: frame.id,
            el: frame,
            navEl: navEl != null ? navEl.parentElement : void 0
          };
        });
        this.frames.home = new FrameView(this.frames.home);
        ['project', 'content', 'report', 'config', 'profile'].forEach(function(n) {
          return _this.frames[n] = new FrameView(_this.frames[n]);
        });
        this.fixStyles();
      };

      ConsoleView.prototype.fixStyles = function() {
        var framesContainer, navContainer,
          _this = this;
        navContainer = find('#navbar', this.el);
        framesContainer = find('#frames', this.el);
        (window.onresize = function() {
          framesContainer.style.top = navContainer.clientHeight + 'px';
        })();
      };

      ConsoleView.prototype.showFrame = function(frame) {
        var _ref, _ref1,
          _this = this;
        frame = this.frames[frame];
        if (frame == null) {
          return;
        }
        if (!(frame instanceof FrameView)) {
          require([frame.id], function(TheFrameView) {
            frame = _this.frames[frame.id] = new TheFrameView(frame);
            frame.render();
          });
        }
        if (!frame.el.classList.contains('active')) {
          if ((_ref = find('#main .frame.active')) != null) {
            _ref.classList.remove('active');
          }
          if ((_ref1 = find('#navbar li.active')) != null) {
            _ref1.classList.remove('active');
          }
          frame.el.classList.add('active');
          frame.navEl.classList.add('active');
        }
      };

      return ConsoleView;

    })(Backbone.View);
    FrameView = (function(_super) {

      __extends(FrameView, _super);

      function FrameView() {
        return FrameView.__super__.constructor.apply(this, arguments);
      }

      FrameView.prototype.initialize = function(options) {
        var _ref;
        this.navEl = options.navEl || ((_ref = find("#navbar a[href=\"#" + this.id + "\"]")) != null ? _ref.parentElement : void 0);
      };

      return FrameView;

    })(Backbone.View);
    SignInView = (function(_super) {

      __extends(SignInView, _super);

      function SignInView() {
        return SignInView.__super__.constructor.apply(this, arguments);
      }

      SignInView.prototype.el = '#signin';

      SignInView.prototype.delay = 500;

      SignInView.prototype.events = {
        'submit form': 'submit'
      };

      SignInView.prototype.submit = function() {
        this.trigger('success', {
          id: 'test',
          name: 'test'
        });
        return false;
      };

      SignInView.prototype.hide = function() {
        var _this = this;
        this.$el.css('opacity', 0);
        setTimeout(function() {
          _this.$el.hide();
        }, this.delay);
      };

      return SignInView;

    })(Backbone.View);
    Entity = (function(_super) {

      __extends(Entity, _super);

      function Entity() {
        return Entity.__super__.constructor.apply(this, arguments);
      }

      Entity.prototype.idAttribute = '_id';

      Entity.prototype.set = function(attrs) {
        if (attrs.name) {
          this._name = attrs.name.tolowerCase().replace(/\W+/g, '_');
        }
        return Entity.__super__.set.call(this, attrs);
      };

      Entity.prototype.validate = function(attrs) {
        if (!(attrs.name && attrs.id)) {
          return 'id and name are required';
        } else if (attrs.name.length > 10) {
          return 'name max len is 10';
        } else {

        }
      };

      return Entity;

    })(Backbone.Model);
    Tenants = (function(_super) {

      __extends(Tenants, _super);

      function Tenants() {
        return Tenants.__super__.constructor.apply(this, arguments);
      }

      Tenants.prototype.model = Tenant;

      Tenants.prototype.url = '/';

      return Tenants;

    })(Backbone.Collection);
    Tenant = (function(_super) {

      __extends(Tenant, _super);

      function Tenant() {
        return Tenant.__super__.constructor.apply(this, arguments);
      }

      Tenant.prototype.idAttribute = '_name';

      return Tenant;

    })(Entity);
    User = (function(_super) {

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      return User;

    })(Entity);
    Participants = (function(_super) {

      __extends(Participants, _super);

      function Participants() {
        return Participants.__super__.constructor.apply(this, arguments);
      }

      Participants.prototype.model = Participant;

      Participants.prototype.url = '/users';

      return Participants;

    })(Backbone.Collection);
    Publichers = (function(_super) {

      __extends(Publichers, _super);

      function Publichers() {
        return Publichers.__super__.constructor.apply(this, arguments);
      }

      Publichers.prototype.model = Publicher;

      Publichers.prototype.url = function() {
        return this.tenant.url() + '/users';
      };

      return Publichers;

    })(Backbone.Collection);
    Participant = (function(_super) {

      __extends(Participant, _super);

      function Participant() {
        return Participant.__super__.constructor.apply(this, arguments);
      }

      return Participant;

    })(User);
    Publicher = (function(_super) {

      __extends(Publicher, _super);

      function Publicher() {
        return Publicher.__super__.constructor.apply(this, arguments);
      }

      return Publicher;

    })(User);
    Evalutator = (function(_super) {

      __extends(Evalutator, _super);

      function Evalutator() {
        return Evalutator.__super__.constructor.apply(this, arguments);
      }

      return Evalutator;

    })(User);
    Router = (function(_super) {

      __extends(Router, _super);

      Router.prototype.frames = ['home', 'project', 'workflow', 'calendar', 'content', 'report', 'config', 'profile'];

      function Router(options) {
        var _this = this;
        this.route('', 'home', function() {
          _this.navigate('home', {
            replace: true
          });
          return _this.show('home');
        });
        this.frames.forEach(function(frame) {
          _this.route(frame + '(/:name)', frame, function(name) {
            return _this.show(frame, name);
          });
        });
        return;
      }

      Router.prototype.show = function(frame, name) {
        var handler, _ref;
        if (this.console == null) {
          throw 'console is not binded';
        }
        console.log('route', frame, name || '');
        if (frame !== this.current) {
          this.current = frame;
          if ((_ref = this.console) != null) {
            _ref.showFrame(frame);
          }
        }
        handler = this[frame];
        if (handler != null) {
          handler.call(this, name);
        }
      };

      Router.prototype.home = function() {};

      Router.prototype.project = function(name) {};

      Router.prototype.workflow = function(name) {};

      Router.prototype.calendar = function(name) {};

      Router.prototype.content = function(name) {};

      Router.prototype.report = function(name) {};

      return Router;

    })(Backbone.Router);
    return {
      find: find,
      findAll: findAll,
      ConsoleView: ConsoleView,
      FrameView: FrameView,
      SignInView: SignInView,
      Entity: Entity,
      Tenants: Tenants,
      Tenant: Tenant,
      User: User,
      Participants: Participants,
      Publichers: Publichers,
      Participant: Participant,
      Publicher: Publicher,
      Evalutator: Evalutator,
      Router: Router
    };
  });

}).call(this);

/*
//@ sourceMappingURL=console.map
*/
