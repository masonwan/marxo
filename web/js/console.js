// Generated by CoffeeScript 1.5.0
(function() {
  var CalendarIFrameView, ConsoleView, Entity, Evalutator, FRAMES, FrameView, IFrameView, Participant, Participants, ProjectIFrameView, Publicher, Publichers, Router, SignInView, Tenant, Tenants, User, WorkflowIFrameView, app, find, findAll,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  find = function(selector, parent) {
    if (parent == null) {
      parent = document;
    }
    return parent.querySelector(selector);
  };

  findAll = function(selector, parent) {
    if (parent == null) {
      parent = document;
    }
    return [].slice.call(parent.querySelectorAll(selector));
  };

  FRAMES = ['home', 'project', 'workflow', 'calendar', 'content', 'report', 'config', 'profile'];

  ConsoleView = (function(_super) {

    __extends(ConsoleView, _super);

    function ConsoleView() {
      ConsoleView.__super__.constructor.apply(this, arguments);
    }

    ConsoleView.prototype.el = '#main';

    ConsoleView.prototype.initialize = function() {
      var _this = this;
      this.frames = {};
      FRAMES.forEach(function(n) {
        _this.frames[n] = _this.createFrame(n);
      });
      this.fixStyles();
    };

    ConsoleView.prototype.createFrame = function(name) {
      switch (name) {
        case 'workflow':
          return new WorkflowIFrameView;
        case 'project':
          return new ProjectIFrameView;
        case 'calendar':
          return new CalendarIFrameView;
        default:
          return new FrameView({
            name: name
          });
      }
    };

    ConsoleView.prototype.fixStyles = function() {
      var frames, padTop,
        _this = this;
      padTop = find('#navbar').clientHeight;
      document.body.style.paddingTop = padTop + 'px';
      frames = findAll('.frame', this.el);
      (window.onresize = function() {
        frames.forEach(function(el) {
          if (el.tagName.toLowerCase() === 'iframe') {
            el.style.height = window.innerHeight - padTop + 'px';
            return el.style.top = padTop + 'px';
          }
        });
      })();
    };

    ConsoleView.prototype.showFrame = function(frame) {
      var _ref, _ref1;
      frame = this.frames[frame];
      if (frame == null) {
        return;
      }
      if (!frame.el.classList.contains('active')) {
        if ((_ref = find('#main .frame.active')) != null) {
          _ref.classList.remove('active');
        }
        if ((_ref1 = find('#navbar li.active')) != null) {
          _ref1.classList.remove('active');
        }
        frame.el.classList.add('active');
        frame.navEl.classList.add('active');
        frame.render();
      }
    };

    return ConsoleView;

  })(Backbone.View);

  FrameView = (function(_super) {

    __extends(FrameView, _super);

    function FrameView() {
      FrameView.__super__.constructor.apply(this, arguments);
    }

    FrameView.prototype.initialize = function(options) {
      var _ref;
      this.name = options.name;
      this.setElement(find('#' + this.name));
      this.navEl = (_ref = find("#navbar a[href=\"#" + this.name + "\"]")) != null ? _ref.parentElement : void 0;
      return this;
    };

    return FrameView;

  })(Backbone.View);

  IFrameView = (function(_super) {

    __extends(IFrameView, _super);

    function IFrameView(options) {
      this.styles = ['bootstrap.min'];
      this.scripts = ['lib/common', 'lib/jquery-ui.custom.min'];
      IFrameView.__super__.constructor.call(this, options);
    }

    IFrameView.prototype.initialize = function(options) {
      IFrameView.__super__.initialize.call(this, options);
    };

    IFrameView.prototype.render = function() {
      var body, html, scripts, styles, _ref;
      if (this.doc == null) {
        console.log('render', this.name);
        body = ((_ref = find("#" + this.name + "_content")) != null ? _ref.innerHTML : void 0) || '';
        styles = (this.styles.map(function(css) {
          return "<link rel='stylesheet' href='css/" + css + ".css' media='screen'/>";
        })).join('\n');
        scripts = (this.scripts.map(function(js) {
          return ("<script src='js/" + js + ".js'></s") + "cript>";
        })).join('\n');
        html = "<!DOCTYPE html><html><base href=\"" + location.href + "\"/><head lang=\"en\"><meta charset=\"utf-8\"/>" + styles + "</head><body>" + body + "\n" + scripts + "</body></html>";
        this.el.src = "data:text/html;charset=utf-8," + encodeURI(html);
        this.doc = this.el.contentDocument;
        this.window = this.el.contentWindow;
        return this;
      }
    };

    return IFrameView;

  })(FrameView);

  WorkflowIFrameView = (function(_super) {

    __extends(WorkflowIFrameView, _super);

    function WorkflowIFrameView() {
      WorkflowIFrameView.__super__.constructor.apply(this, arguments);
    }

    WorkflowIFrameView.prototype.initialize = function(options) {
      var name;
      if (options == null) {
        options = {};
      }
      name = options.name = 'workflow';
      this.styles.push(name);
      this.scripts.push('lib/jquery.jsPlumb.min');
      this.scripts.push(name);
      return WorkflowIFrameView.__super__.initialize.call(this, options);
    };

    return WorkflowIFrameView;

  })(IFrameView);

  ProjectIFrameView = (function(_super) {

    __extends(ProjectIFrameView, _super);

    function ProjectIFrameView() {
      ProjectIFrameView.__super__.constructor.apply(this, arguments);
    }

    ProjectIFrameView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      options.name = 'project';
      return ProjectIFrameView.__super__.initialize.call(this, options);
    };

    ProjectIFrameView.prototype.render = function() {
      if (this.doc == null) {
        ProjectIFrameView.__super__.render.call(this);
        return this;
      }
    };

    return ProjectIFrameView;

  })(IFrameView);

  CalendarIFrameView = (function(_super) {

    __extends(CalendarIFrameView, _super);

    function CalendarIFrameView() {
      CalendarIFrameView.__super__.constructor.apply(this, arguments);
    }

    CalendarIFrameView.prototype.initialize = function(options) {
      var name;
      if (options == null) {
        options = {};
      }
      name = options.name = 'calendar';
      this.styles.push('fullcalendar');
      this.styles.push(name);
      this.scripts.push('lib/fullcalendar.min');
      this.scripts.push(name);
      return CalendarIFrameView.__super__.initialize.call(this, options);
    };

    return CalendarIFrameView;

  })(IFrameView);

  SignInView = (function(_super) {

    __extends(SignInView, _super);

    function SignInView() {
      SignInView.__super__.constructor.apply(this, arguments);
    }

    SignInView.prototype.el = '#signin';

    SignInView.prototype.delay = 500;

    SignInView.prototype.events = {
      'submit form': 'submit'
    };

    SignInView.prototype.submit = function() {
      this.trigger('success', {
        id: 'test',
        name: 'test'
      });
      return false;
    };

    SignInView.prototype.hide = function() {
      var _this = this;
      this.$el.css('opacity', 0);
      setTimeout(function() {
        _this.$el.hide();
      }, this.delay);
      return this;
    };

    return SignInView;

  })(Backbone.View);

  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity() {
      Entity.__super__.constructor.apply(this, arguments);
    }

    Entity.prototype.idAttribute = '_id';

    Entity.prototype.set = function(attrs) {
      if (attrs.name) {
        this._name = attrs.name.tolowerCase().replace(/\W+/g, '_');
      }
      return Entity.__super__.set.call(this, attrs);
    };

    Entity.prototype.validate = function(attrs) {
      if (!(attrs.name && attrs.id)) {
        return 'id and name are required';
      } else if (attrs.name.length > 10) {
        return 'name max len is 10';
      } else {

      }
    };

    return Entity;

  })(Backbone.Model);

  Tenants = (function(_super) {

    __extends(Tenants, _super);

    function Tenants() {
      Tenants.__super__.constructor.apply(this, arguments);
    }

    Tenants.prototype.model = Tenant;

    Tenants.prototype.url = '/';

    return Tenants;

  })(Backbone.Collection);

  Tenant = (function(_super) {

    __extends(Tenant, _super);

    function Tenant() {
      Tenant.__super__.constructor.apply(this, arguments);
    }

    Tenant.prototype.idAttribute = '_name';

    return Tenant;

  })(Entity);

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      User.__super__.constructor.apply(this, arguments);
    }

    return User;

  })(Entity);

  Participants = (function(_super) {

    __extends(Participants, _super);

    function Participants() {
      Participants.__super__.constructor.apply(this, arguments);
    }

    Participants.prototype.model = Participant;

    Participants.prototype.url = '/users';

    return Participants;

  })(Backbone.Collection);

  Publichers = (function(_super) {

    __extends(Publichers, _super);

    function Publichers() {
      Publichers.__super__.constructor.apply(this, arguments);
    }

    Publichers.prototype.model = Publicher;

    Publichers.prototype.url = function() {
      return this.tenant.url() + '/users';
    };

    return Publichers;

  })(Backbone.Collection);

  Participant = (function(_super) {

    __extends(Participant, _super);

    function Participant() {
      Participant.__super__.constructor.apply(this, arguments);
    }

    return Participant;

  })(User);

  Publicher = (function(_super) {

    __extends(Publicher, _super);

    function Publicher() {
      Publicher.__super__.constructor.apply(this, arguments);
    }

    return Publicher;

  })(User);

  Evalutator = (function(_super) {

    __extends(Evalutator, _super);

    function Evalutator() {
      Evalutator.__super__.constructor.apply(this, arguments);
    }

    return Evalutator;

  })(User);

  Router = (function(_super) {

    __extends(Router, _super);

    Router.prototype.frames = FRAMES;

    function Router(options) {
      var _this = this;
      this.route('', 'home', function() {
        _this.navigate('home', {
          replace: true
        });
        return _this.show('home');
      });
      this.frames.forEach(function(frame) {
        _this.route(frame + '(/:name)', frame, function(name) {
          return _this.show(frame, name);
        });
      });
      return;
    }

    Router.prototype.show = function(frame, name) {
      var handler, _ref;
      if (this.console == null) {
        throw 'console is not binded';
      }
      console.log('route', frame, name || '');
      if (frame !== this.current) {
        this.current = frame;
        if ((_ref = this.console) != null) {
          _ref.showFrame(frame);
        }
      }
      handler = this[frame];
      if (handler != null) {
        handler.call(this, name);
      }
    };

    Router.prototype.home = function() {};

    Router.prototype.project = function(name) {};

    Router.prototype.workflow = function(name) {};

    Router.prototype.calendar = function(name) {};

    Router.prototype.content = function(name) {};

    Router.prototype.report = function(name) {};

    return Router;

  })(Backbone.Router);

  window.app = app = {
    console: new ConsoleView,
    signin: new SignInView,
    router: new Router
  };

  app.signin.on('success', function() {
    this.hide();
    app.console.$el.show();
  });

  app.signin.trigger('success');

  app.router.console = app.console;

  Backbone.history.start();

}).call(this);
