// Generated by CoffeeScript 1.4.0
(function() {
  var createLink, data, deleteLink, procData, removeFromArray;

  data = {
    name: 'demo_wf',
    desc: 'Demo Workflow',
    tenantId: "507f81413d070321728fdeff",
    nodes: [
      {
        id: "507f81413d070321728fde10",
        name: 'Post Idea',
        desc: 'Post software project ideas'
      }, {
        id: "507f81413d070321728fde11",
        name: 'Post Cancel',
        desc: 'Post cancel notification'
      }, {
        id: "507f81413d070321728fde12",
        name: 'Post Requrement',
        desc: 'Post project requirement'
      }, {
        id: "507f81413d070321728fde13",
        name: 'Submit Design',
        desc: 'Retrieve theme design submissions & e-mail to stackholders'
      }, {
        id: "507f81413d070321728fde14",
        name: 'Notification',
        desc: 'Notification'
      }, {
        id: "507f81413d070321728fde15",
        name: 'Post Result',
        desc: 'Post & e-mail result everyone'
      }
    ],
    links: [
      {
        id: "507f81413d070321728fde21",
        name: 'Like count >= 300',
        desc: 'Continue to post requirement if like count >= 300',
        from: "507f81413d070321728fde10",
        to: "507f81413d070321728fde12"
      }, {
        id: "507f81413d070321728fde21",
        name: 'Like count &lt; 300',
        desc: 'Cancel if like count &lt; 300',
        from: "507f81413d070321728fde10",
        to: "507f81413d070321728fde11"
      }, {
        id: "507f81413d070321728fde22",
        from: "507f81413d070321728fde12",
        to: "507f81413d070321728fde13"
      }, {
        id: "507f81413d070321728fde22",
        name: 'Pass rate &lt;= 50%',
        desc: 'Notification if pass rate &lt;= 50%',
        from: "507f81413d070321728fde13",
        to: "507f81413d070321728fde14"
      }, {
        id: "507f81413d070321728fde23",
        name: 'Pass rate &gt; 50%',
        desc: 'Post & e-mail to everyone if pass rate &gt; 50%',
        from: "507f81413d070321728fde13",
        to: "507f81413d070321728fde15"
      }
    ]
  };

  createLink = function(sourceId, targetId) {
    var fromNode, link, toNode, uuid;
    uuid = sourceId + '-' + targetId;
    console.log('create link', uuid);
    fromNode = data.nodes.index[sourceId];
    toNode = data.nodes.index[targetId];
    link = {
      uuid: uuid,
      fromNode: fromNode,
      toNode: toNode
    };
    data.links.push(link);
    fromNode.toLinks.push(link);
    toNode.fromLinks.push(link);
    data.links.index[uuid] = link;
    return link;
  };

  deleteLink = function(link) {
    console.log('delete link', link.uuid);
    delete data.links.index[link.id];
    delete data.links.index[link.uuid];
    removeFromArray(data.links, link);
    removeFromArray(link.fromNode.toLinks, link);
    removeFromArray(link.toNode.fromLinks, link);
  };

  removeFromArray = function(array, item) {
    var idx;
    idx = array.indexOf(item);
    if (idx !== -1) {
      return array.splice(idx, 1);
    }
  };

  (procData = function() {
    var endNodes, grid, linkIndex, lonelyNodes, nodeIndex, startNodes, traval;
    nodeIndex = data.nodes.index = {};
    linkIndex = data.links.index = {};
    startNodes = data.nodes.starts = [];
    endNodes = data.nodes.ends = [];
    lonelyNodes = data.nodes.alones = [];
    data.nodes.forEach(function(node) {
      var uuid;
      uuid = node.uuid = node.name.toLowerCase().replace(/\W/g, '_');
      nodeIndex[uuid] = nodeIndex[node.id] = node;
      node.toLinks = [];
      node.fromLinks = [];
    });
    data.links.forEach(function(link) {
      link.fromNode = nodeIndex[link.from];
      link.fromNode.toLinks.push(link);
      link.toNode = nodeIndex[link.to];
      link.toNode.fromLinks.push(link);
      link.uuid = link.fromNode.uuid + '-' + link.toNode.uuid;
      linkIndex[link.id] = linkIndex[link.uuid] = link;
    });
    data.nodes.forEach(function(node) {
      var _ref;
      if ((node.fromLinks.length === (_ref = node.toLinks.length) && _ref === 0)) {
        lonelyNodes.push(node);
      } else if (node.fromLinks.length === 0) {
        startNodes.push(node);
      } else if (node.toLinks.length === 0) {
        endNodes.push(node);
      }
    });
    grid = window.grid = [startNodes.concat(lonelyNodes)];
    grid.spanX = 350;
    grid.spanY = 150;
    grid.vertical = false;
    (traval = function(level) {
      var nextLevel, _ref;
      nextLevel = [];
      if ((_ref = grid[level]) != null) {
        _ref.forEach(function(node, i) {
          var _ref1;
          node.gridX = i;
          node.gridY = level;
          if (grid.vertical) {
            node.x = i * grid.spanX;
            node.y = level * grid.spanY;
          } else {
            node.x = level * grid.spanX;
            node.y = i * grid.spanY;
          }
          if ((_ref1 = node.toLinks) != null) {
            _ref1.forEach(function(link) {
              return nextLevel.push(link.toNode);
            });
          }
        });
      }
      if (nextLevel.length) {
        grid[level + 1] = nextLevel;
        traval(level + 1);
      }
    })(0);
  })();

  jsPlumb.ready(function() {
    var root, sourceEndpoint, targetEndpoint;
    jsPlumb.importDefaults({
      Endpoint: [
        'Dot', {
          radius: 3
        }
      ],
      ConnectionsDetachable: true,
      ReattachConnections: true,
      HoverPaintStyle: {
        strokeStyle: '#42a62c',
        lineWidth: 2
      },
      ConnectionOverlays: [
        [
          'Arrow', {
            location: 1,
            id: 'arrow'
          }
        ], [
          'Label', {
            location: 0.5,
            label: 'new link',
            id: 'label',
            cssClass: 'aLabel'
          }
        ]
      ]
    });
    sourceEndpoint = {
      isSource: true,
      uniqueEndpoint: true,
      anchor: 'RightMiddle',
      paintStyle: {
        fillStyle: '#225588',
        radius: 7
      },
      connector: [
        'Flowchart', {
          stub: [40, 60],
          gap: 10
        }
      ],
      connectorStyle: {
        strokeStyle: '#346789',
        lineWidth: 2
      },
      maxConnections: -1
    };
    targetEndpoint = {
      dropOptions: {
        hoverClass: 'hover'
      },
      anchor: ['LeftMiddle', 'BottomCenter']
    };
    root = $('<div id="demo"></div>');
    $(document.body).append(root);
    data.nodes.forEach(function(node) {
      var el;
      el = node.el = $("<div class=\"node\" id=\"" + node.uuid + "\"><strong>" + node.name + "</strong></div>");
      el.css({
        top: node.y,
        left: node.x
      });
      root.append(el);
      jsPlumb.draggable(el);
      node.srcEndpoint = jsPlumb.addEndpoint(el, sourceEndpoint, {
        parameters: {
          node: node
        }
      });
      jsPlumb.makeTarget(el, targetEndpoint, {
        parameters: {
          node: node
        }
      });
    });
    jsPlumb.bind('jsPlumbConnection', function(info) {
      var conn, label, link;
      conn = info.connection;
      link = conn.getParameter('link');
      label = conn.getOverlay('label');
      if (!(link != null)) {
        conn.setParameter('link', createLink(info.sourceId, info.targetId));
        label.hide();
      } else if (link.name != null) {
        label.setLabel(link.name);
      } else {
        label.hide();
      }
    });
    jsPlumb.bind('jsPlumbConnectionDetached', function(info) {
      var node;
      deleteLink(info.connection.getParameter('link'));
      node = data.nodes.index[info.sourceId];
      jsPlumb.deleteEndpoint(node.srcEndpoint);
      node.srcEndpoint = jsPlumb.addEndpoint(node.el, sourceEndpoint, {
        parameters: {
          node: node
        }
      });
    });
    jsPlumb.bind('beforeDrop', function(info) {
      var newlink, oldLink, uuid;
      uuid = info.sourceId + '-' + info.targetId;
      newlink = data.links.index[uuid];
      oldLink = info.connection.getParameter('link');
      if (newlink != null) {
        console.log('link exists', uuid);
        return false;
      } else {
        if (oldLink != null) {
          deleteLink(oldLink);
        }
        return true;
      }
    });
    data.links.forEach(function(link) {
      jsPlumb.connect({
        source: link.fromNode.srcEndpoint,
        target: link.toNode.el,
        parameters: {
          link: link
        }
      });
    });
    return jsPlumb.bind('dblclick', function(conn) {
      if (confirm('Delete connection from ' + conn.sourceId + ' to ' + conn.targetId + '?')) {
        jsPlumb.detach(conn);
      }
    });
  });

  document.body.onselectstart = function() {
    return false;
  };

}).call(this);
